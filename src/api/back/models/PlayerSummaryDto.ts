/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BanStatusDto,
    BanStatusDtoFromJSON,
    BanStatusDtoFromJSONTyped,
    BanStatusDtoToJSON,
    GamemodeAccessMap,
    GamemodeAccessMapFromJSON,
    GamemodeAccessMapFromJSONTyped,
    GamemodeAccessMapToJSON,
    PlayerAspectDto,
    PlayerAspectDtoFromJSON,
    PlayerAspectDtoFromJSONTyped,
    PlayerAspectDtoToJSON,
    PlayerSessionDto,
    PlayerSessionDtoFromJSON,
    PlayerSessionDtoFromJSONTyped,
    PlayerSessionDtoToJSON,
    PlayerStatsDto,
    PlayerStatsDtoFromJSON,
    PlayerStatsDtoFromJSONTyped,
    PlayerStatsDtoToJSON,
    RecalibrationDto,
    RecalibrationDtoFromJSON,
    RecalibrationDtoFromJSONTyped,
    RecalibrationDtoToJSON,
    UserDTO,
    UserDTOFromJSON,
    UserDTOFromJSONTyped,
    UserDTOToJSON,
} from './';

/**
 * 
 * @export
 * @interface PlayerSummaryDto
 */
export interface PlayerSummaryDto {
    /**
     * 
     * @type {UserDTO}
     * @memberof PlayerSummaryDto
     */
    user: UserDTO;
    /**
     * 
     * @type {BanStatusDto}
     * @memberof PlayerSummaryDto
     */
    banStatus: BanStatusDto;
    /**
     * 
     * @type {string}
     * @memberof PlayerSummaryDto
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof PlayerSummaryDto
     */
    calibrationGamesLeft: number;
    /**
     * 
     * @type {RecalibrationDto}
     * @memberof PlayerSummaryDto
     */
    recalibration?: RecalibrationDto;
    /**
     * 
     * @type {PlayerStatsDto}
     * @memberof PlayerSummaryDto
     */
    seasonStats: PlayerStatsDto;
    /**
     * 
     * @type {PlayerStatsDto}
     * @memberof PlayerSummaryDto
     */
    overallStats: PlayerStatsDto;
    /**
     * 
     * @type {PlayerSessionDto}
     * @memberof PlayerSummaryDto
     */
    session?: PlayerSessionDto;
    /**
     * 
     * @type {GamemodeAccessMap}
     * @memberof PlayerSummaryDto
     */
    accessMap: GamemodeAccessMap;
    /**
     * 
     * @type {Array<PlayerAspectDto>}
     * @memberof PlayerSummaryDto
     */
    aspects: Array<PlayerAspectDto>;
}

export function PlayerSummaryDtoFromJSON(json: any): PlayerSummaryDto {
    return PlayerSummaryDtoFromJSONTyped(json, false);
}

export function PlayerSummaryDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlayerSummaryDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'user': UserDTOFromJSON(json['user']),
        'banStatus': BanStatusDtoFromJSON(json['banStatus']),
        'id': json['id'],
        'calibrationGamesLeft': json['calibrationGamesLeft'],
        'recalibration': !exists(json, 'recalibration') ? undefined : RecalibrationDtoFromJSON(json['recalibration']),
        'seasonStats': PlayerStatsDtoFromJSON(json['seasonStats']),
        'overallStats': PlayerStatsDtoFromJSON(json['overallStats']),
        'session': !exists(json, 'session') ? undefined : PlayerSessionDtoFromJSON(json['session']),
        'accessMap': GamemodeAccessMapFromJSON(json['accessMap']),
        'aspects': ((json['aspects'] as Array<any>).map(PlayerAspectDtoFromJSON)),
    };
}

export function PlayerSummaryDtoToJSON(value?: PlayerSummaryDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'user': UserDTOToJSON(value.user),
        'banStatus': BanStatusDtoToJSON(value.banStatus),
        'id': value.id,
        'calibrationGamesLeft': value.calibrationGamesLeft,
        'recalibration': RecalibrationDtoToJSON(value.recalibration),
        'seasonStats': PlayerStatsDtoToJSON(value.seasonStats),
        'overallStats': PlayerStatsDtoToJSON(value.overallStats),
        'session': PlayerSessionDtoToJSON(value.session),
        'accessMap': GamemodeAccessMapToJSON(value.accessMap),
        'aspects': ((value.aspects as Array<any>).map(PlayerAspectDtoToJSON)),
    };
}


