/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    NotificationAchievementDto,
    NotificationAchievementDtoFromJSON,
    NotificationAchievementDtoFromJSONTyped,
    NotificationAchievementDtoToJSON,
    NotificationMatchDto,
    NotificationMatchDtoFromJSON,
    NotificationMatchDtoFromJSONTyped,
    NotificationMatchDtoToJSON,
    NotificationThreadDto,
    NotificationThreadDtoFromJSON,
    NotificationThreadDtoFromJSONTyped,
    NotificationThreadDtoToJSON,
    NotificationType,
    NotificationTypeFromJSON,
    NotificationTypeFromJSONTyped,
    NotificationTypeToJSON,
    PlayerFeedbackDto,
    PlayerFeedbackDtoFromJSON,
    PlayerFeedbackDtoFromJSONTyped,
    PlayerFeedbackDtoToJSON,
} from './';

/**
 * 
 * @export
 * @interface NotificationDto
 */
export interface NotificationDto {
    /**
     * 
     * @type {NotificationType}
     * @memberof NotificationDto
     */
    notificationType: NotificationType;
    /**
     * 
     * @type {string}
     * @memberof NotificationDto
     */
    id: string;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationDto
     */
    acknowledged: boolean;
    /**
     * 
     * @type {string}
     * @memberof NotificationDto
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationDto
     */
    expiresAt: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationDto
     */
    steamId: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationDto
     */
    entityType: NotificationDtoEntityTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationDto
     */
    entityId: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationDto
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationDto
     */
    content: string;
    /**
     * 
     * @type {PlayerFeedbackDto}
     * @memberof NotificationDto
     */
    feedback?: PlayerFeedbackDto;
    /**
     * 
     * @type {NotificationAchievementDto}
     * @memberof NotificationDto
     */
    achievement?: NotificationAchievementDto;
    /**
     * 
     * @type {NotificationThreadDto}
     * @memberof NotificationDto
     */
    thread?: NotificationThreadDto;
    /**
     * 
     * @type {NotificationMatchDto}
     * @memberof NotificationDto
     */
    match?: NotificationMatchDto;
}

export function NotificationDtoFromJSON(json: any): NotificationDto {
    return NotificationDtoFromJSONTyped(json, false);
}

export function NotificationDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): NotificationDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'notificationType': NotificationTypeFromJSON(json['notificationType']),
        'id': json['id'],
        'acknowledged': json['acknowledged'],
        'createdAt': json['createdAt'],
        'expiresAt': json['expiresAt'],
        'steamId': json['steamId'],
        'entityType': json['entityType'],
        'entityId': json['entityId'],
        'title': json['title'],
        'content': json['content'],
        'feedback': !exists(json, 'feedback') ? undefined : PlayerFeedbackDtoFromJSON(json['feedback']),
        'achievement': !exists(json, 'achievement') ? undefined : NotificationAchievementDtoFromJSON(json['achievement']),
        'thread': !exists(json, 'thread') ? undefined : NotificationThreadDtoFromJSON(json['thread']),
        'match': !exists(json, 'match') ? undefined : NotificationMatchDtoFromJSON(json['match']),
    };
}

export function NotificationDtoToJSON(value?: NotificationDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'notificationType': NotificationTypeToJSON(value.notificationType),
        'id': value.id,
        'acknowledged': value.acknowledged,
        'createdAt': value.createdAt,
        'expiresAt': value.expiresAt,
        'steamId': value.steamId,
        'entityType': value.entityType,
        'entityId': value.entityId,
        'title': value.title,
        'content': value.content,
        'feedback': PlayerFeedbackDtoToJSON(value.feedback),
        'achievement': NotificationAchievementDtoToJSON(value.achievement),
        'thread': NotificationThreadDtoToJSON(value.thread),
        'match': NotificationMatchDtoToJSON(value.match),
    };
}

/**
* @export
* @enum {string}
*/
export enum NotificationDtoEntityTypeEnum {
    FEEDBACK = 'FEEDBACK',
    ACHIEVEMENT = 'ACHIEVEMENT',
    FEEDBACKTICKET = 'FEEDBACK_TICKET',
    REPORTTICKET = 'REPORT_TICKET',
    PLAYER = 'PLAYER',
    MATCH = 'MATCH'
}


