/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PlayerInfo
 */
export interface PlayerInfo {
    /**
     * 
     * @type {string}
     * @memberof PlayerInfo
     */
    hero: string;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    level: number;
    /**
     * 
     * @type {boolean}
     * @memberof PlayerInfo
     */
    bot: boolean;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    posX: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    posY: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    angle: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    mana: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    maxMana: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    health: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    maxHealth: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    item0: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    item1: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    item2: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    item3: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    item4: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    item5: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    kills: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    deaths: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    assists: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInfo
     */
    respawnTime: number;
}

export function PlayerInfoFromJSON(json: any): PlayerInfo {
    return PlayerInfoFromJSONTyped(json, false);
}

export function PlayerInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlayerInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hero': json['hero'],
        'level': json['level'],
        'bot': json['bot'],
        'posX': json['pos_x'],
        'posY': json['pos_y'],
        'angle': json['angle'],
        'mana': json['mana'],
        'maxMana': json['max_mana'],
        'health': json['health'],
        'maxHealth': json['max_health'],
        'item0': json['item0'],
        'item1': json['item1'],
        'item2': json['item2'],
        'item3': json['item3'],
        'item4': json['item4'],
        'item5': json['item5'],
        'kills': json['kills'],
        'deaths': json['deaths'],
        'assists': json['assists'],
        'respawnTime': json['respawn_time'],
    };
}

export function PlayerInfoToJSON(value?: PlayerInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hero': value.hero,
        'level': value.level,
        'bot': value.bot,
        'pos_x': value.posX,
        'pos_y': value.posY,
        'angle': value.angle,
        'mana': value.mana,
        'max_mana': value.maxMana,
        'health': value.health,
        'max_health': value.maxHealth,
        'item0': value.item0,
        'item1': value.item1,
        'item2': value.item2,
        'item3': value.item3,
        'item4': value.item4,
        'item5': value.item5,
        'kills': value.kills,
        'deaths': value.deaths,
        'assists': value.assists,
        'respawn_time': value.respawnTime,
    };
}


