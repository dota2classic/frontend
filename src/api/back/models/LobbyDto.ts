/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    DotaGameMode,
    DotaGameModeFromJSON,
    DotaGameModeFromJSONTyped,
    DotaGameModeToJSON,
    DotaMap,
    DotaMapFromJSON,
    DotaMapFromJSONTyped,
    DotaMapToJSON,
    LobbySlotDto,
    LobbySlotDtoFromJSON,
    LobbySlotDtoFromJSONTyped,
    LobbySlotDtoToJSON,
    UserDTO,
    UserDTOFromJSON,
    UserDTOFromJSONTyped,
    UserDTOToJSON,
} from './';

/**
 * 
 * @export
 * @interface LobbyDto
 */
export interface LobbyDto {
    /**
     * 
     * @type {DotaGameMode}
     * @memberof LobbyDto
     */
    gameMode: DotaGameMode;
    /**
     * 
     * @type {DotaMap}
     * @memberof LobbyDto
     */
    map: DotaMap;
    /**
     * 
     * @type {string}
     * @memberof LobbyDto
     */
    id: string;
    /**
     * 
     * @type {UserDTO}
     * @memberof LobbyDto
     */
    owner: UserDTO;
    /**
     * 
     * @type {Array<LobbySlotDto>}
     * @memberof LobbyDto
     */
    slots: Array<LobbySlotDto>;
}

export function LobbyDtoFromJSON(json: any): LobbyDto {
    return LobbyDtoFromJSONTyped(json, false);
}

export function LobbyDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): LobbyDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'gameMode': DotaGameModeFromJSON(json['gameMode']),
        'map': DotaMapFromJSON(json['map']),
        'id': json['id'],
        'owner': UserDTOFromJSON(json['owner']),
        'slots': ((json['slots'] as Array<any>).map(LobbySlotDtoFromJSON)),
    };
}

export function LobbyDtoToJSON(value?: LobbyDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'gameMode': DotaGameModeToJSON(value.gameMode),
        'map': DotaMapToJSON(value.map),
        'id': value.id,
        'owner': UserDTOToJSON(value.owner),
        'slots': ((value.slots as Array<any>).map(LobbySlotDtoToJSON)),
    };
}


