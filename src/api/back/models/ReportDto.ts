/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    RuleDto,
    RuleDtoFromJSON,
    RuleDtoFromJSONTyped,
    RuleDtoToJSON,
    ThreadMessageDTO,
    ThreadMessageDTOFromJSON,
    ThreadMessageDTOFromJSONTyped,
    ThreadMessageDTOToJSON,
    UserDTO,
    UserDTOFromJSON,
    UserDTOFromJSONTyped,
    UserDTOToJSON,
} from './';

/**
 * 
 * @export
 * @interface ReportDto
 */
export interface ReportDto {
    /**
     * 
     * @type {string}
     * @memberof ReportDto
     */
    id: string;
    /**
     * 
     * @type {UserDTO}
     * @memberof ReportDto
     */
    reported: UserDTO;
    /**
     * 
     * @type {UserDTO}
     * @memberof ReportDto
     */
    reporter: UserDTO;
    /**
     * 
     * @type {RuleDto}
     * @memberof ReportDto
     */
    rule: RuleDto;
    /**
     * 
     * @type {boolean}
     * @memberof ReportDto
     */
    handled: boolean;
    /**
     * 
     * @type {string}
     * @memberof ReportDto
     */
    createdAt: string;
    /**
     * 
     * @type {number}
     * @memberof ReportDto
     */
    matchId?: number;
    /**
     * 
     * @type {ThreadMessageDTO}
     * @memberof ReportDto
     */
    message?: ThreadMessageDTO;
}

export function ReportDtoFromJSON(json: any): ReportDto {
    return ReportDtoFromJSONTyped(json, false);
}

export function ReportDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReportDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'reported': UserDTOFromJSON(json['reported']),
        'reporter': UserDTOFromJSON(json['reporter']),
        'rule': RuleDtoFromJSON(json['rule']),
        'handled': json['handled'],
        'createdAt': json['createdAt'],
        'matchId': !exists(json, 'matchId') ? undefined : json['matchId'],
        'message': !exists(json, 'message') ? undefined : ThreadMessageDTOFromJSON(json['message']),
    };
}

export function ReportDtoToJSON(value?: ReportDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'reported': UserDTOToJSON(value.reported),
        'reporter': UserDTOToJSON(value.reporter),
        'rule': RuleDtoToJSON(value.rule),
        'handled': value.handled,
        'createdAt': value.createdAt,
        'matchId': value.matchId,
        'message': ThreadMessageDTOToJSON(value.message),
    };
}


