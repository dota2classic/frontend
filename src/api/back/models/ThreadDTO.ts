/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  ThreadMessageDTO,
  ThreadMessageDTOFromJSON,
  ThreadMessageDTOFromJSONTyped,
  ThreadMessageDTOToJSON,
  ThreadType,
  ThreadTypeFromJSON,
  ThreadTypeFromJSONTyped,
  ThreadTypeToJSON,
  UserDTO,
  UserDTOFromJSON,
  UserDTOFromJSONTyped,
  UserDTOToJSON,
} from "./";

/**
 *
 * @export
 * @interface ThreadDTO
 */
export interface ThreadDTO {
  /**
   *
   * @type {ThreadType}
   * @memberof ThreadDTO
   */
  threadType: ThreadType;
  /**
   *
   * @type {string}
   * @memberof ThreadDTO
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof ThreadDTO
   */
  externalId: string;
  /**
   *
   * @type {string}
   * @memberof ThreadDTO
   */
  title: string;
  /**
   *
   * @type {number}
   * @memberof ThreadDTO
   */
  messageCount: number;
  /**
   *
   * @type {number}
   * @memberof ThreadDTO
   */
  newMessageCount: number;
  /**
   *
   * @type {number}
   * @memberof ThreadDTO
   */
  views: number;
  /**
   *
   * @type {UserDTO}
   * @memberof ThreadDTO
   */
  originalPoster: UserDTO;
  /**
   *
   * @type {ThreadMessageDTO}
   * @memberof ThreadDTO
   */
  lastMessage: ThreadMessageDTO;
}

export function ThreadDTOFromJSON(json: any): ThreadDTO {
  return ThreadDTOFromJSONTyped(json, false);
}

export function ThreadDTOFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ThreadDTO {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    threadType: ThreadTypeFromJSON(json["threadType"]),
    id: json["id"],
    externalId: json["externalId"],
    title: json["title"],
    messageCount: json["messageCount"],
    newMessageCount: json["newMessageCount"],
    views: json["views"],
    originalPoster: UserDTOFromJSON(json["originalPoster"]),
    lastMessage: ThreadMessageDTOFromJSON(json["lastMessage"]),
  };
}

export function ThreadDTOToJSON(value?: ThreadDTO | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    threadType: ThreadTypeToJSON(value.threadType),
    id: value.id,
    externalId: value.externalId,
    title: value.title,
    messageCount: value.messageCount,
    newMessageCount: value.newMessageCount,
    views: value.views,
    originalPoster: UserDTOToJSON(value.originalPoster),
    lastMessage: ThreadMessageDTOToJSON(value.lastMessage),
  };
}
