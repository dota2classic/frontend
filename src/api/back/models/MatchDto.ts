/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {exists} from '../runtime';
import {
    FakeEnum,
    FakeEnumFromJSON,
    FakeEnumToJSON,
    MatchmakingMode,
    MatchmakingModeFromJSON,
    MatchmakingModeToJSON,
    PlayerInMatchDto,
    PlayerInMatchDtoFromJSON,
    PlayerInMatchDtoToJSON,
} from "./";

/**
 *
 * @export
 * @interface MatchDto
 */
export interface MatchDto {
  /**
   *
   * @type {FakeEnum}
   * @memberof MatchDto
   */
  fakeEnum?: FakeEnum;
  /**
   *
   * @type {MatchmakingMode}
   * @memberof MatchDto
   */
  mode: MatchmakingMode;
  /**
   *
   * @type {number}
   * @memberof MatchDto
   */
  id: number;
  /**
   *
   * @type {Array<PlayerInMatchDto>}
   * @memberof MatchDto
   */
  radiant: Array<PlayerInMatchDto>;
  /**
   *
   * @type {Array<PlayerInMatchDto>}
   * @memberof MatchDto
   */
  dire: Array<PlayerInMatchDto>;
  /**
   *
   * @type {number}
   * @memberof MatchDto
   */
  winner: number;
  /**
   *
   * @type {number}
   * @memberof MatchDto
   */
  duration: number;
  /**
   *
   * @type {boolean}
   * @memberof MatchDto
   */
  reportable: boolean;
  /**
   *
   * @type {string}
   * @memberof MatchDto
   */
  timestamp: string;
}

export function MatchDtoFromJSON(json: any): MatchDto {
    return MatchDtoFromJSONTyped(json, false);
}

export function MatchDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): MatchDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
      fakeEnum: !exists(json, "fakeEnum")
        ? undefined
        : FakeEnumFromJSON(json["fakeEnum"]),
      mode: MatchmakingModeFromJSON(json["mode"]),
      id: json["id"],
      radiant: (json["radiant"] as Array<any>).map(PlayerInMatchDtoFromJSON),
      dire: (json["dire"] as Array<any>).map(PlayerInMatchDtoFromJSON),
      winner: json["winner"],
      duration: json["duration"],
      reportable: json["reportable"],
      timestamp: json["timestamp"],
    };
}

export function MatchDtoToJSON(value?: MatchDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
      fakeEnum: FakeEnumToJSON(value.fakeEnum),
      mode: MatchmakingModeToJSON(value.mode),
      id: value.id,
      radiant: (value.radiant as Array<any>).map(PlayerInMatchDtoToJSON),
      dire: (value.dire as Array<any>).map(PlayerInMatchDtoToJSON),
      winner: value.winner,
      duration: value.duration,
      reportable: value.reportable,
      timestamp: value.timestamp,
    };
}


