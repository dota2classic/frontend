/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ProfileDecorationDto,
    ProfileDecorationDtoFromJSON,
    ProfileDecorationDtoFromJSONTyped,
    ProfileDecorationDtoToJSON,
    RoleLifetimeDto,
    RoleLifetimeDtoFromJSON,
    RoleLifetimeDtoFromJSONTyped,
    RoleLifetimeDtoToJSON,
    UserConnectionDto,
    UserConnectionDtoFromJSON,
    UserConnectionDtoFromJSONTyped,
    UserConnectionDtoToJSON,
} from './';

/**
 * 
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    steamId: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    avatar: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    avatarSmall: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    name: string;
    /**
     * 
     * @type {Array<RoleLifetimeDto>}
     * @memberof UserDTO
     */
    roles: Array<RoleLifetimeDto>;
    /**
     * 
     * @type {Array<UserConnectionDto>}
     * @memberof UserDTO
     */
    connections: Array<UserConnectionDto>;
    /**
     * 
     * @type {ProfileDecorationDto}
     * @memberof UserDTO
     */
    hat?: ProfileDecorationDto;
    /**
     * 
     * @type {ProfileDecorationDto}
     * @memberof UserDTO
     */
    icon?: ProfileDecorationDto;
    /**
     * 
     * @type {ProfileDecorationDto}
     * @memberof UserDTO
     */
    title?: ProfileDecorationDto;
    /**
     * 
     * @type {ProfileDecorationDto}
     * @memberof UserDTO
     */
    chatIconAnimation?: ProfileDecorationDto;
}

export function UserDTOFromJSON(json: any): UserDTO {
    return UserDTOFromJSONTyped(json, false);
}

export function UserDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'steamId': json['steamId'],
        'avatar': json['avatar'],
        'avatarSmall': json['avatarSmall'],
        'name': json['name'],
        'roles': ((json['roles'] as Array<any>).map(RoleLifetimeDtoFromJSON)),
        'connections': ((json['connections'] as Array<any>).map(UserConnectionDtoFromJSON)),
        'hat': !exists(json, 'hat') ? undefined : ProfileDecorationDtoFromJSON(json['hat']),
        'icon': !exists(json, 'icon') ? undefined : ProfileDecorationDtoFromJSON(json['icon']),
        'title': !exists(json, 'title') ? undefined : ProfileDecorationDtoFromJSON(json['title']),
        'chatIconAnimation': !exists(json, 'chatIconAnimation') ? undefined : ProfileDecorationDtoFromJSON(json['chatIconAnimation']),
    };
}

export function UserDTOToJSON(value?: UserDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'steamId': value.steamId,
        'avatar': value.avatar,
        'avatarSmall': value.avatarSmall,
        'name': value.name,
        'roles': ((value.roles as Array<any>).map(RoleLifetimeDtoToJSON)),
        'connections': ((value.connections as Array<any>).map(UserConnectionDtoToJSON)),
        'hat': ProfileDecorationDtoToJSON(value.hat),
        'icon': ProfileDecorationDtoToJSON(value.icon),
        'title': ProfileDecorationDtoToJSON(value.title),
        'chatIconAnimation': ProfileDecorationDtoToJSON(value.chatIconAnimation),
    };
}


