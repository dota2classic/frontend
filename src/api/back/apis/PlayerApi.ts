/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";
import useSWR from "swr";
import { SWRConfiguration } from "swr/_internal";

import {
  AchievementDto,
  AchievementDtoFromJSON,
  AchievementDtoToJSON,
  HeroStatsDto,
  HeroStatsDtoFromJSON,
  HeroStatsDtoToJSON,
  LeaderboardEntryPageDto,
  LeaderboardEntryPageDtoFromJSON,
  LeaderboardEntryPageDtoToJSON,
  MeDto,
  MeDtoFromJSON,
  MeDtoToJSON,
  MyProfileDto,
  MyProfileDtoFromJSON,
  MyProfileDtoToJSON,
  PartyDto,
  PartyDtoFromJSON,
  PartyDtoToJSON,
  PlayerSummaryDto,
  PlayerSummaryDtoFromJSON,
  PlayerSummaryDtoToJSON,
  PlayerTeammatePageDto,
  PlayerTeammatePageDtoFromJSON,
  PlayerTeammatePageDtoToJSON,
  ReportDto,
  ReportDtoFromJSON,
  ReportDtoToJSON,
  UserDTO,
  UserDTOFromJSON,
  UserDTOToJSON,
} from "../models";

export interface PlayerControllerAchievementsRequest {
  id: string;
}

export interface PlayerControllerHeroSummaryRequest {
  id: string;
}

export interface PlayerControllerLeaderboardRequest {
  page: number;
  perPage?: number;
}

export interface PlayerControllerPlayerSummaryRequest {
  id: string;
}

export interface PlayerControllerReportPlayerRequest {
  reportDto: ReportDto;
}

export interface PlayerControllerSearchRequest {
  name: string;
}

export interface PlayerControllerTeammatesRequest {
  id: string;
  page: number;
  perPage?: number;
}

/**
 * 
 */
export class PlayerApi extends runtime.BaseAPI {

    /**
     */
    private async playerControllerAchievementsRaw(requestParameters: PlayerControllerAchievementsRequest): Promise<runtime.ApiResponse<Array<AchievementDto>>> {
        this.playerControllerAchievementsValidation(requestParameters);
        const context = this.playerControllerAchievementsContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AchievementDtoFromJSON));
    }



    /**
     */
    private playerControllerAchievementsValidation(requestParameters: PlayerControllerAchievementsRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling playerControllerAchievements.");
        }
    }

    /**
     */
    playerControllerAchievementsContext(requestParameters: PlayerControllerAchievementsRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/player/{id}/achievements`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    playerControllerAchievements = async (id: string): Promise<Array<AchievementDto>> => {
        const response = await this.playerControllerAchievementsRaw({ id: id });
        return await response.value();
    }

    usePlayerControllerAchievements(id: string, config?: SWRConfiguration<Array<AchievementDto>, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        const context = this.playerControllerAchievementsContext({ id: id! });
        return useSWR(context, valid ? () => this.playerControllerAchievements(id!) : null, config)
    }

    /**
     */
    private async playerControllerConnectionsRaw(): Promise<runtime.ApiResponse<MyProfileDto>> {
        this.playerControllerConnectionsValidation();
        const context = this.playerControllerConnectionsContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => MyProfileDtoFromJSON(jsonValue));
    }



    /**
     */
    private playerControllerConnectionsValidation() {
    }

    /**
     */
    playerControllerConnectionsContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/player/connections`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    playerControllerConnections = async (): Promise<MyProfileDto> => {
        const response = await this.playerControllerConnectionsRaw();
        return await response.value();
    }

    usePlayerControllerConnections(config?: SWRConfiguration<MyProfileDto, Error>) {
        let valid = true

        const context = this.playerControllerConnectionsContext();
        return useSWR(context, valid ? () => this.playerControllerConnections() : null, config)
    }

    /**
     */
    private async playerControllerHeroSummaryRaw(requestParameters: PlayerControllerHeroSummaryRequest): Promise<runtime.ApiResponse<Array<HeroStatsDto>>> {
        this.playerControllerHeroSummaryValidation(requestParameters);
        const context = this.playerControllerHeroSummaryContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HeroStatsDtoFromJSON));
    }



    /**
     */
    private playerControllerHeroSummaryValidation(requestParameters: PlayerControllerHeroSummaryRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling playerControllerHeroSummary.");
        }
    }

    /**
     */
    playerControllerHeroSummaryContext(requestParameters: PlayerControllerHeroSummaryRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/player/summary/hero/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    playerControllerHeroSummary = async (id: string): Promise<Array<HeroStatsDto>> => {
        const response = await this.playerControllerHeroSummaryRaw({ id: id });
        return await response.value();
    }

    usePlayerControllerHeroSummary(id: string, config?: SWRConfiguration<Array<HeroStatsDto>, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        const context = this.playerControllerHeroSummaryContext({ id: id! });
        return useSWR(context, valid ? () => this.playerControllerHeroSummary(id!) : null, config)
    }

    /**
     */
    private async playerControllerLeaderboardRaw(requestParameters: PlayerControllerLeaderboardRequest): Promise<runtime.ApiResponse<LeaderboardEntryPageDto>> {
        this.playerControllerLeaderboardValidation(requestParameters);
        const context = this.playerControllerLeaderboardContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeaderboardEntryPageDtoFromJSON(jsonValue));
    }



    /**
     */
    private playerControllerLeaderboardValidation(requestParameters: PlayerControllerLeaderboardRequest) {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError("page","Required parameter requestParameters.page was null or undefined when calling playerControllerLeaderboard.");
        }
    }

    /**
     */
    playerControllerLeaderboardContext(requestParameters: PlayerControllerLeaderboardRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters["page"] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters["per_page"] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/player/leaderboard`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    playerControllerLeaderboard = async (page: number, perPage?: number): Promise<LeaderboardEntryPageDto> => {
        const response = await this.playerControllerLeaderboardRaw({ page: page, perPage: perPage });
        return await response.value();
    }

    usePlayerControllerLeaderboard(page: number, perPage?: number, config?: SWRConfiguration<LeaderboardEntryPageDto, Error>) {
        let valid = true

        if (page === null || page === undefined || Number.isNaN(page)) {
            valid = false
        }

        const context = this.playerControllerLeaderboardContext({ page: page!, perPage: perPage! });
        return useSWR(context, valid ? () => this.playerControllerLeaderboard(page!, perPage!) : null, config)
    }

    /**
     */
    private async playerControllerMeRaw(): Promise<runtime.ApiResponse<MeDto>> {
        this.playerControllerMeValidation();
        const context = this.playerControllerMeContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => MeDtoFromJSON(jsonValue));
    }



    /**
     */
    private playerControllerMeValidation() {
    }

    /**
     */
    playerControllerMeContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/player/me`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    playerControllerMe = async (): Promise<MeDto> => {
        const response = await this.playerControllerMeRaw();
        return await response.value();
    }

    usePlayerControllerMe(config?: SWRConfiguration<MeDto, Error>) {
        let valid = true

        const context = this.playerControllerMeContext();
        return useSWR(context, valid ? () => this.playerControllerMe() : null, config)
    }

    /**
     */
    private async playerControllerMyPartyRaw(): Promise<runtime.ApiResponse<PartyDto>> {
        this.playerControllerMyPartyValidation();
        const context = this.playerControllerMyPartyContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => PartyDtoFromJSON(jsonValue));
    }



    /**
     */
    private playerControllerMyPartyValidation() {
    }

    /**
     */
    playerControllerMyPartyContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/player/party`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    playerControllerMyParty = async (): Promise<PartyDto> => {
        const response = await this.playerControllerMyPartyRaw();
        return await response.value();
    }

    usePlayerControllerMyParty(config?: SWRConfiguration<PartyDto, Error>) {
        let valid = true

        const context = this.playerControllerMyPartyContext();
        return useSWR(context, valid ? () => this.playerControllerMyParty() : null, config)
    }

    /**
     */
    private async playerControllerPlayerSummaryRaw(requestParameters: PlayerControllerPlayerSummaryRequest): Promise<runtime.ApiResponse<PlayerSummaryDto>> {
        this.playerControllerPlayerSummaryValidation(requestParameters);
        const context = this.playerControllerPlayerSummaryContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerSummaryDtoFromJSON(jsonValue));
    }



    /**
     */
    private playerControllerPlayerSummaryValidation(requestParameters: PlayerControllerPlayerSummaryRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling playerControllerPlayerSummary.");
        }
    }

    /**
     */
    playerControllerPlayerSummaryContext(requestParameters: PlayerControllerPlayerSummaryRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/player/{id}/summary`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    playerControllerPlayerSummary = async (id: string): Promise<PlayerSummaryDto> => {
        const response = await this.playerControllerPlayerSummaryRaw({ id: id });
        return await response.value();
    }

    usePlayerControllerPlayerSummary(id: string, config?: SWRConfiguration<PlayerSummaryDto, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        const context = this.playerControllerPlayerSummaryContext({ id: id! });
        return useSWR(context, valid ? () => this.playerControllerPlayerSummary(id!) : null, config)
    }

    /**
     */
    private async playerControllerReportPlayerRaw(requestParameters: PlayerControllerReportPlayerRequest): Promise<runtime.ApiResponse<boolean>> {
        this.playerControllerReportPlayerValidation(requestParameters);
        const context = this.playerControllerReportPlayerContext(requestParameters);
        const response = await this.request(context);

        return new runtime.TextApiResponse(response) as any;
    }



    /**
     */
    private playerControllerReportPlayerValidation(requestParameters: PlayerControllerReportPlayerRequest) {
        if (requestParameters.reportDto === null || requestParameters.reportDto === undefined) {
            throw new runtime.RequiredError("reportDto","Required parameter requestParameters.reportDto was null or undefined when calling playerControllerReportPlayer.");
        }
    }

    /**
     */
    playerControllerReportPlayerContext(requestParameters: PlayerControllerReportPlayerRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/player/report`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ReportDtoToJSON(requestParameters.reportDto),
        };
    }

    /**
     */
    playerControllerReportPlayer = async (reportDto: ReportDto): Promise<boolean> => {
        const response = await this.playerControllerReportPlayerRaw({ reportDto: reportDto });
        return await response.value();
    }


    /**
     */
    private async playerControllerSearchRaw(requestParameters: PlayerControllerSearchRequest): Promise<runtime.ApiResponse<Array<UserDTO>>> {
        this.playerControllerSearchValidation(requestParameters);
        const context = this.playerControllerSearchContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserDTOFromJSON));
    }



    /**
     */
    private playerControllerSearchValidation(requestParameters: PlayerControllerSearchRequest) {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError("name","Required parameter requestParameters.name was null or undefined when calling playerControllerSearch.");
        }
    }

    /**
     */
    playerControllerSearchContext(requestParameters: PlayerControllerSearchRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters["name"] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/player/search`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    playerControllerSearch = async (name: string): Promise<Array<UserDTO>> => {
        const response = await this.playerControllerSearchRaw({ name: name });
        return await response.value();
    }

    usePlayerControllerSearch(name: string, config?: SWRConfiguration<Array<UserDTO>, Error>) {
        let valid = true

        if (name === null || name === undefined || Number.isNaN(name)) {
            valid = false
        }

        const context = this.playerControllerSearchContext({ name: name! });
        return useSWR(context, valid ? () => this.playerControllerSearch(name!) : null, config)
    }

    /**
     */
    private async playerControllerTeammatesRaw(requestParameters: PlayerControllerTeammatesRequest): Promise<runtime.ApiResponse<PlayerTeammatePageDto>> {
        this.playerControllerTeammatesValidation(requestParameters);
        const context = this.playerControllerTeammatesContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerTeammatePageDtoFromJSON(jsonValue));
    }



    /**
     */
    private playerControllerTeammatesValidation(requestParameters: PlayerControllerTeammatesRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling playerControllerTeammates.");
        }
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError("page","Required parameter requestParameters.page was null or undefined when calling playerControllerTeammates.");
        }
    }

    /**
     */
    playerControllerTeammatesContext(requestParameters: PlayerControllerTeammatesRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters["page"] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters["per_page"] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/player/{id}/teammates`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    playerControllerTeammates = async (id: string, page: number, perPage?: number): Promise<PlayerTeammatePageDto> => {
        const response = await this.playerControllerTeammatesRaw({ id: id, page: page, perPage: perPage });
        return await response.value();
    }

    usePlayerControllerTeammates(id: string, page: number, perPage?: number, config?: SWRConfiguration<PlayerTeammatePageDto, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        if (page === null || page === undefined || Number.isNaN(page)) {
            valid = false
        }

        const context = this.playerControllerTeammatesContext({ id: id!, page: page!, perPage: perPage! });
        return useSWR(context, valid ? () => this.playerControllerTeammates(id!, page!, perPage!) : null, config)
    }

}
