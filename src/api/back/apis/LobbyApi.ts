/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";
import useSWR from "swr";
import { SWRConfiguration } from "swr/_internal";

import {
  ChangeTeamInLobbyDto,
  ChangeTeamInLobbyDtoFromJSON,
  ChangeTeamInLobbyDtoToJSON,
  LobbyDto,
  LobbyDtoFromJSON,
  LobbyDtoToJSON,
  LobbyUpdateDto,
  LobbyUpdateDtoFromJSON,
  LobbyUpdateDtoToJSON,
  UpdateLobbyDto,
  UpdateLobbyDtoFromJSON,
  UpdateLobbyDtoToJSON,
} from "../models";

export interface LobbyControllerChangeTeamRequest {
  id: string;
  changeTeamInLobbyDto: ChangeTeamInLobbyDto;
}

export interface LobbyControllerCloseLobbyRequest {
  id: string;
}

export interface LobbyControllerGetLobbyRequest {
  id: string;
}

export interface LobbyControllerJoinLobbyRequest {
  id: string;
}

export interface LobbyControllerLeaveLobbyRequest {
  id: string;
}

export interface LobbyControllerLobbyUpdatesRequest {
  id: string;
}

export interface LobbyControllerStartLobbyRequest {
  id: string;
}

export interface LobbyControllerUpdateLobbyRequest {
  id: string;
  updateLobbyDto: UpdateLobbyDto;
}

/**
 * 
 */
export class LobbyApi extends runtime.BaseAPI {

    /**
     */
    private async lobbyControllerChangeTeamRaw(requestParameters: LobbyControllerChangeTeamRequest): Promise<runtime.ApiResponse<LobbyDto>> {
        this.lobbyControllerChangeTeamValidation(requestParameters);
        const context = this.lobbyControllerChangeTeamContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => LobbyDtoFromJSON(jsonValue));
    }



    /**
     */
    private lobbyControllerChangeTeamValidation(requestParameters: LobbyControllerChangeTeamRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling lobbyControllerChangeTeam.");
        }
        if (requestParameters.changeTeamInLobbyDto === null || requestParameters.changeTeamInLobbyDto === undefined) {
            throw new runtime.RequiredError("changeTeamInLobbyDto","Required parameter requestParameters.changeTeamInLobbyDto was null or undefined when calling lobbyControllerChangeTeam.");
        }
    }

    /**
     */
    lobbyControllerChangeTeamContext(requestParameters: LobbyControllerChangeTeamRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/lobby/{id}/changeTeam`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ChangeTeamInLobbyDtoToJSON(requestParameters.changeTeamInLobbyDto),
        };
    }

    /**
     */
    lobbyControllerChangeTeam = async (id: string, changeTeamInLobbyDto: ChangeTeamInLobbyDto): Promise<LobbyDto> => {
        const response = await this.lobbyControllerChangeTeamRaw({ id: id, changeTeamInLobbyDto: changeTeamInLobbyDto });
        return await response.value();
    }


    /**
     */
    private async lobbyControllerCloseLobbyRaw(requestParameters: LobbyControllerCloseLobbyRequest): Promise<runtime.ApiResponse<void>> {
        this.lobbyControllerCloseLobbyValidation(requestParameters);
        const context = this.lobbyControllerCloseLobbyContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }



    /**
     */
    private lobbyControllerCloseLobbyValidation(requestParameters: LobbyControllerCloseLobbyRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling lobbyControllerCloseLobby.");
        }
    }

    /**
     */
    lobbyControllerCloseLobbyContext(requestParameters: LobbyControllerCloseLobbyRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/lobby/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "DELETE",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    lobbyControllerCloseLobby = async (id: string): Promise<void> => {
        await this.lobbyControllerCloseLobbyRaw({ id: id });
    }

    useLobbyControllerCloseLobby(id: string, config?: SWRConfiguration<void, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        const context = this.lobbyControllerCloseLobbyContext({ id: id! });
        return useSWR(context, valid ? () => this.lobbyControllerCloseLobby(id!) : null, config)
    }

    /**
     */
    private async lobbyControllerCreateLobbyRaw(): Promise<runtime.ApiResponse<LobbyDto>> {
        this.lobbyControllerCreateLobbyValidation();
        const context = this.lobbyControllerCreateLobbyContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => LobbyDtoFromJSON(jsonValue));
    }



    /**
     */
    private lobbyControllerCreateLobbyValidation() {
    }

    /**
     */
    lobbyControllerCreateLobbyContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/lobby`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    lobbyControllerCreateLobby = async (): Promise<LobbyDto> => {
        const response = await this.lobbyControllerCreateLobbyRaw();
        return await response.value();
    }


    /**
     */
    private async lobbyControllerGetLobbyRaw(requestParameters: LobbyControllerGetLobbyRequest): Promise<runtime.ApiResponse<LobbyDto>> {
        this.lobbyControllerGetLobbyValidation(requestParameters);
        const context = this.lobbyControllerGetLobbyContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => LobbyDtoFromJSON(jsonValue));
    }



    /**
     */
    private lobbyControllerGetLobbyValidation(requestParameters: LobbyControllerGetLobbyRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling lobbyControllerGetLobby.");
        }
    }

    /**
     */
    lobbyControllerGetLobbyContext(requestParameters: LobbyControllerGetLobbyRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/lobby/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    lobbyControllerGetLobby = async (id: string): Promise<LobbyDto> => {
        const response = await this.lobbyControllerGetLobbyRaw({ id: id });
        return await response.value();
    }

    useLobbyControllerGetLobby(id: string, config?: SWRConfiguration<LobbyDto, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        const context = this.lobbyControllerGetLobbyContext({ id: id! });
        return useSWR(context, valid ? () => this.lobbyControllerGetLobby(id!) : null, config)
    }

    /**
     */
    private async lobbyControllerJoinLobbyRaw(requestParameters: LobbyControllerJoinLobbyRequest): Promise<runtime.ApiResponse<LobbyDto>> {
        this.lobbyControllerJoinLobbyValidation(requestParameters);
        const context = this.lobbyControllerJoinLobbyContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => LobbyDtoFromJSON(jsonValue));
    }



    /**
     */
    private lobbyControllerJoinLobbyValidation(requestParameters: LobbyControllerJoinLobbyRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling lobbyControllerJoinLobby.");
        }
    }

    /**
     */
    lobbyControllerJoinLobbyContext(requestParameters: LobbyControllerJoinLobbyRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/lobby/{id}/join`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    lobbyControllerJoinLobby = async (id: string): Promise<LobbyDto> => {
        const response = await this.lobbyControllerJoinLobbyRaw({ id: id });
        return await response.value();
    }


    /**
     */
    private async lobbyControllerLeaveLobbyRaw(requestParameters: LobbyControllerLeaveLobbyRequest): Promise<runtime.ApiResponse<void>> {
        this.lobbyControllerLeaveLobbyValidation(requestParameters);
        const context = this.lobbyControllerLeaveLobbyContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }



    /**
     */
    private lobbyControllerLeaveLobbyValidation(requestParameters: LobbyControllerLeaveLobbyRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling lobbyControllerLeaveLobby.");
        }
    }

    /**
     */
    lobbyControllerLeaveLobbyContext(requestParameters: LobbyControllerLeaveLobbyRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/lobby/{id}/leave`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    lobbyControllerLeaveLobby = async (id: string): Promise<void> => {
        await this.lobbyControllerLeaveLobbyRaw({ id: id });
    }


    /**
     */
    private async lobbyControllerListLobbiesRaw(): Promise<runtime.ApiResponse<Array<LobbyDto>>> {
        this.lobbyControllerListLobbiesValidation();
        const context = this.lobbyControllerListLobbiesContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LobbyDtoFromJSON));
    }



    /**
     */
    private lobbyControllerListLobbiesValidation() {
    }

    /**
     */
    lobbyControllerListLobbiesContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/lobby`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    lobbyControllerListLobbies = async (): Promise<Array<LobbyDto>> => {
        const response = await this.lobbyControllerListLobbiesRaw();
        return await response.value();
    }

    useLobbyControllerListLobbies(config?: SWRConfiguration<Array<LobbyDto>, Error>) {
        let valid = true

        const context = this.lobbyControllerListLobbiesContext();
        return useSWR(context, valid ? () => this.lobbyControllerListLobbies() : null, config)
    }

    /**
     */
    private async lobbyControllerLobbyUpdatesRaw(requestParameters: LobbyControllerLobbyUpdatesRequest): Promise<runtime.ApiResponse<LobbyUpdateDto>> {
        this.lobbyControllerLobbyUpdatesValidation(requestParameters);
        const context = this.lobbyControllerLobbyUpdatesContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => LobbyUpdateDtoFromJSON(jsonValue));
    }



    /**
     */
    private lobbyControllerLobbyUpdatesValidation(requestParameters: LobbyControllerLobbyUpdatesRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling lobbyControllerLobbyUpdates.");
        }
    }

    /**
     */
    lobbyControllerLobbyUpdatesContext(requestParameters: LobbyControllerLobbyUpdatesRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/lobby/sse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    lobbyControllerLobbyUpdates = async (id: string): Promise<LobbyUpdateDto> => {
        const response = await this.lobbyControllerLobbyUpdatesRaw({ id: id });
        return await response.value();
    }

    useLobbyControllerLobbyUpdates(id: string, config?: SWRConfiguration<LobbyUpdateDto, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        const context = this.lobbyControllerLobbyUpdatesContext({ id: id! });
        return useSWR(context, valid ? () => this.lobbyControllerLobbyUpdates(id!) : null, config)
    }

    /**
     */
    private async lobbyControllerStartLobbyRaw(requestParameters: LobbyControllerStartLobbyRequest): Promise<runtime.ApiResponse<void>> {
        this.lobbyControllerStartLobbyValidation(requestParameters);
        const context = this.lobbyControllerStartLobbyContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }



    /**
     */
    private lobbyControllerStartLobbyValidation(requestParameters: LobbyControllerStartLobbyRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling lobbyControllerStartLobby.");
        }
    }

    /**
     */
    lobbyControllerStartLobbyContext(requestParameters: LobbyControllerStartLobbyRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/lobby/{id}/start`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    lobbyControllerStartLobby = async (id: string): Promise<void> => {
        await this.lobbyControllerStartLobbyRaw({ id: id });
    }


    /**
     */
    private async lobbyControllerUpdateLobbyRaw(requestParameters: LobbyControllerUpdateLobbyRequest): Promise<runtime.ApiResponse<LobbyDto>> {
        this.lobbyControllerUpdateLobbyValidation(requestParameters);
        const context = this.lobbyControllerUpdateLobbyContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => LobbyDtoFromJSON(jsonValue));
    }



    /**
     */
    private lobbyControllerUpdateLobbyValidation(requestParameters: LobbyControllerUpdateLobbyRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling lobbyControllerUpdateLobby.");
        }
        if (requestParameters.updateLobbyDto === null || requestParameters.updateLobbyDto === undefined) {
            throw new runtime.RequiredError("updateLobbyDto","Required parameter requestParameters.updateLobbyDto was null or undefined when calling lobbyControllerUpdateLobby.");
        }
    }

    /**
     */
    lobbyControllerUpdateLobbyContext(requestParameters: LobbyControllerUpdateLobbyRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/lobby/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "PATCH",
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLobbyDtoToJSON(requestParameters.updateLobbyDto),
        };
    }

    /**
     */
    lobbyControllerUpdateLobby = async (id: string, updateLobbyDto: UpdateLobbyDto): Promise<LobbyDto> => {
        const response = await this.lobbyControllerUpdateLobbyRaw({ id: id, updateLobbyDto: updateLobbyDto });
        return await response.value();
    }


}
