/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";
import useSWR from "swr";
import { SWRConfiguration } from "swr/_internal";


export interface SteamControllerSteamSessionTicketToTokenRequest {
  ticket: string;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     */
    private async steamControllerRefreshTokenRaw(): Promise<runtime.ApiResponse<string>> {
        this.steamControllerRefreshTokenValidation();
        const context = this.steamControllerRefreshTokenContext();
        const response = await this.request(context);

        return new runtime.TextApiResponse(response) as any;
    }



    /**
     */
    private steamControllerRefreshTokenValidation() {
    }

    /**
     */
    steamControllerRefreshTokenContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/auth/steam/refresh_token`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    steamControllerRefreshToken = async (): Promise<string> => {
        const response = await this.steamControllerRefreshTokenRaw();
        return await response.value();
    }


    /**
     */
    private async steamControllerSteamSessionTicketToTokenRaw(requestParameters: SteamControllerSteamSessionTicketToTokenRequest): Promise<runtime.ApiResponse<string>> {
        this.steamControllerSteamSessionTicketToTokenValidation(requestParameters);
        const context = this.steamControllerSteamSessionTicketToTokenContext(requestParameters);
        const response = await this.request(context);

        return new runtime.TextApiResponse(response) as any;
    }



    /**
     */
    private steamControllerSteamSessionTicketToTokenValidation(requestParameters: SteamControllerSteamSessionTicketToTokenRequest) {
        if (requestParameters.ticket === null || requestParameters.ticket === undefined) {
            throw new runtime.RequiredError("ticket","Required parameter requestParameters.ticket was null or undefined when calling steamControllerSteamSessionTicketToToken.");
        }
    }

    /**
     */
    steamControllerSteamSessionTicketToTokenContext(requestParameters: SteamControllerSteamSessionTicketToTokenRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.ticket !== undefined) {
            queryParameters["ticket"] = requestParameters.ticket;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/auth/steam/steam_session_ticket`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    steamControllerSteamSessionTicketToToken = async (ticket: string): Promise<string> => {
        const response = await this.steamControllerSteamSessionTicketToTokenRaw({ ticket: ticket });
        return await response.value();
    }


}
