/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";
import useSWR from "swr";
import { SWRConfiguration } from "swr/_internal";

import {
  HeroItemDto,
  HeroItemDtoFromJSON,
  HeroPlayerDto,
  HeroPlayerDtoFromJSON,
  HeroSummaryDto,
  HeroSummaryDtoFromJSON,
} from "../models";

export interface MetaControllerHeroRequest {
  hero: string;
}

export interface MetaControllerHeroPlayersRequest {
  hero: string;
}

/**
 *
 */
export class MetaApi extends runtime.BaseAPI {
  /**
   */
  metaControllerHeroContext(
    requestParameters: MetaControllerHeroRequest,
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/v1/meta/hero/{hero}`.replace(
        `{${"hero"}}`,
        encodeURIComponent(String(requestParameters.hero)),
      ),
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  metaControllerHero = async (hero: string): Promise<Array<HeroItemDto>> => {
    const response = await this.metaControllerHeroRaw({ hero: hero });
    return await response.value();
  };

  useMetaControllerHero(
    hero: string,
    config?: SWRConfiguration<Array<HeroItemDto>, Error>,
  ) {
    let valid = true;

    if (hero === null || hero === undefined || Number.isNaN(hero)) {
      valid = false;
    }

    const context = this.metaControllerHeroContext({ hero: hero! });
    return useSWR(
      context,
      valid ? () => this.metaControllerHero(hero!) : null,
      config,
    );
  }

  /**
   */
  metaControllerHeroPlayersContext(
    requestParameters: MetaControllerHeroPlayersRequest,
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/v1/meta/hero/{hero}/players`.replace(
        `{${"hero"}}`,
        encodeURIComponent(String(requestParameters.hero)),
      ),
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  metaControllerHeroPlayers = async (
    hero: string,
  ): Promise<Array<HeroPlayerDto>> => {
    const response = await this.metaControllerHeroPlayersRaw({ hero: hero });
    return await response.value();
  };

  useMetaControllerHeroPlayers(
    hero: string,
    config?: SWRConfiguration<Array<HeroPlayerDto>, Error>,
  ) {
    let valid = true;

    if (hero === null || hero === undefined || Number.isNaN(hero)) {
      valid = false;
    }

    const context = this.metaControllerHeroPlayersContext({ hero: hero! });
    return useSWR(
      context,
      valid ? () => this.metaControllerHeroPlayers(hero!) : null,
      config,
    );
  }

  /**
   */
  metaControllerHeroesContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/v1/meta/heroes`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  metaControllerHeroes = async (): Promise<Array<HeroSummaryDto>> => {
    const response = await this.metaControllerHeroesRaw();
    return await response.value();
  };

  useMetaControllerHeroes(
    config?: SWRConfiguration<Array<HeroSummaryDto>, Error>,
  ) {
    let valid = true;

    const context = this.metaControllerHeroesContext();
    return useSWR(
      context,
      valid ? () => this.metaControllerHeroes() : null,
      config,
    );
  }

  /**
   */
  private async metaControllerHeroRaw(
    requestParameters: MetaControllerHeroRequest,
  ): Promise<runtime.ApiResponse<Array<HeroItemDto>>> {
    this.metaControllerHeroValidation(requestParameters);
    const context = this.metaControllerHeroContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(HeroItemDtoFromJSON),
    );
  }

  /**
   */
  private metaControllerHeroValidation(
    requestParameters: MetaControllerHeroRequest,
  ) {
    if (
      requestParameters.hero === null ||
      requestParameters.hero === undefined
    ) {
      throw new runtime.RequiredError(
        "hero",
        "Required parameter requestParameters.hero was null or undefined when calling metaControllerHero.",
      );
    }
  }

  /**
   */
  private async metaControllerHeroPlayersRaw(
    requestParameters: MetaControllerHeroPlayersRequest,
  ): Promise<runtime.ApiResponse<Array<HeroPlayerDto>>> {
    this.metaControllerHeroPlayersValidation(requestParameters);
    const context = this.metaControllerHeroPlayersContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(HeroPlayerDtoFromJSON),
    );
  }

  /**
   */
  private metaControllerHeroPlayersValidation(
    requestParameters: MetaControllerHeroPlayersRequest,
  ) {
    if (
      requestParameters.hero === null ||
      requestParameters.hero === undefined
    ) {
      throw new runtime.RequiredError(
        "hero",
        "Required parameter requestParameters.hero was null or undefined when calling metaControllerHeroPlayers.",
      );
    }
  }

  /**
   */
  private async metaControllerHeroesRaw(): Promise<
    runtime.ApiResponse<Array<HeroSummaryDto>>
  > {
    this.metaControllerHeroesValidation();
    const context = this.metaControllerHeroesContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(HeroSummaryDtoFromJSON),
    );
  }

  /**
   */
  private metaControllerHeroesValidation() {}
}
