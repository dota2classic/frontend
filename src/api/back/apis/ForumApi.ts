/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";
import useSWR from "swr";
import { SWRConfiguration } from "swr/_internal";

import {
  CreateMessageDTO,
  CreateMessageDTOFromJSON,
  CreateMessageDTOToJSON,
  CreateThreadDTO,
  CreateThreadDTOFromJSON,
  CreateThreadDTOToJSON,
  EditMessageDto,
  EditMessageDtoFromJSON,
  EditMessageDtoToJSON,
  EmoticonDto,
  EmoticonDtoFromJSON,
  EmoticonDtoToJSON,
  ForumUserDto,
  ForumUserDtoFromJSON,
  ForumUserDtoToJSON,
  SortOrder,
  SortOrderFromJSON,
  SortOrderToJSON,
  ThreadDTO,
  ThreadDTOFromJSON,
  ThreadDTOToJSON,
  ThreadMessageDTO,
  ThreadMessageDTOFromJSON,
  ThreadMessageDTOToJSON,
  ThreadMessagePageDTO,
  ThreadMessagePageDTOFromJSON,
  ThreadMessagePageDTOToJSON,
  ThreadMessageSseDto,
  ThreadMessageSseDtoFromJSON,
  ThreadMessageSseDtoToJSON,
  ThreadPageDTO,
  ThreadPageDTOFromJSON,
  ThreadPageDTOToJSON,
  ThreadType,
  ThreadTypeFromJSON,
  ThreadTypeToJSON,
  UpdateMessageReactionDto,
  UpdateMessageReactionDtoFromJSON,
  UpdateMessageReactionDtoToJSON,
  UpdateThreadDTO,
  UpdateThreadDTOFromJSON,
  UpdateThreadDTOToJSON,
  UpdateUserDTO,
  UpdateUserDTOFromJSON,
  UpdateUserDTOToJSON,
} from "../models";

export interface ForumControllerCreateThreadRequest {
  createThreadDTO: CreateThreadDTO;
}

export interface ForumControllerDeleteMessageRequest {
  id: string;
}

export interface ForumControllerEditMessageRequest {
  id: string;
  editMessageDto: EditMessageDto;
}

export interface ForumControllerEmoticonsRequest {
  steamId?: string;
}

export interface ForumControllerGetLatestPageRequest {
  id: string;
  threadType: ThreadType;
  perPage?: number;
}

export interface ForumControllerGetMessagesRequest {
  id: string;
  threadType: ThreadType;
  cursor?: string;
  limit?: number;
  order?: SortOrder;
}

export interface ForumControllerGetThreadRequest {
  id: string;
  threadType: ThreadType;
}

export interface ForumControllerGetUserRequest {
  id: string;
}

export interface ForumControllerMessagesPageRequest {
  id: string;
  threadType: ThreadType;
  page: number;
  cursor?: string;
  perPage?: number;
}

export interface ForumControllerPostMessageRequest {
  createMessageDTO: CreateMessageDTO;
}

export interface ForumControllerReactRequest {
  id: string;
  updateMessageReactionDto: UpdateMessageReactionDto;
}

export interface ForumControllerThreadRequest {
  id: string;
  threadType: ThreadType;
}

export interface ForumControllerThreadsRequest {
  page: number;
  onlyAuthored: boolean;
  perPage?: number;
  threadType?: ThreadType;
}

export interface ForumControllerUpdateThreadRequest {
  id: string;
  updateThreadDTO: UpdateThreadDTO;
}

export interface ForumControllerUpdateUserRequest {
  id: string;
  updateUserDTO: UpdateUserDTO;
}

/**
 * 
 */
export class ForumApi extends runtime.BaseAPI {

    /**
     */
    private async forumControllerCreateThreadRaw(requestParameters: ForumControllerCreateThreadRequest): Promise<runtime.ApiResponse<ThreadDTO>> {
        this.forumControllerCreateThreadValidation(requestParameters);
        const context = this.forumControllerCreateThreadContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadDTOFromJSON(jsonValue));
    }



    /**
     */
    private forumControllerCreateThreadValidation(requestParameters: ForumControllerCreateThreadRequest) {
        if (requestParameters.createThreadDTO === null || requestParameters.createThreadDTO === undefined) {
            throw new runtime.RequiredError("createThreadDTO","Required parameter requestParameters.createThreadDTO was null or undefined when calling forumControllerCreateThread.");
        }
    }

    /**
     */
    forumControllerCreateThreadContext(requestParameters: ForumControllerCreateThreadRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/forum/thread`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: CreateThreadDTOToJSON(requestParameters.createThreadDTO),
        };
    }

    /**
     */
    forumControllerCreateThread = async (createThreadDTO: CreateThreadDTO): Promise<ThreadDTO> => {
        const response = await this.forumControllerCreateThreadRaw({ createThreadDTO: createThreadDTO });
        return await response.value();
    }


    /**
     */
    private async forumControllerDeleteMessageRaw(requestParameters: ForumControllerDeleteMessageRequest): Promise<runtime.ApiResponse<ThreadMessageDTO>> {
        this.forumControllerDeleteMessageValidation(requestParameters);
        const context = this.forumControllerDeleteMessageContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadMessageDTOFromJSON(jsonValue));
    }



    /**
     */
    private forumControllerDeleteMessageValidation(requestParameters: ForumControllerDeleteMessageRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling forumControllerDeleteMessage.");
        }
    }

    /**
     */
    forumControllerDeleteMessageContext(requestParameters: ForumControllerDeleteMessageRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/forum/thread/message/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "DELETE",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    forumControllerDeleteMessage = async (id: string): Promise<ThreadMessageDTO> => {
        const response = await this.forumControllerDeleteMessageRaw({ id: id });
        return await response.value();
    }

    useForumControllerDeleteMessage(id: string, config?: SWRConfiguration<ThreadMessageDTO, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        const context = this.forumControllerDeleteMessageContext({ id: id! });
        return useSWR(context, valid ? () => this.forumControllerDeleteMessage(id!) : null, config)
    }

    /**
     */
    private async forumControllerEditMessageRaw(requestParameters: ForumControllerEditMessageRequest): Promise<runtime.ApiResponse<ThreadMessageDTO>> {
        this.forumControllerEditMessageValidation(requestParameters);
        const context = this.forumControllerEditMessageContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadMessageDTOFromJSON(jsonValue));
    }



    /**
     */
    private forumControllerEditMessageValidation(requestParameters: ForumControllerEditMessageRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling forumControllerEditMessage.");
        }
        if (requestParameters.editMessageDto === null || requestParameters.editMessageDto === undefined) {
            throw new runtime.RequiredError("editMessageDto","Required parameter requestParameters.editMessageDto was null or undefined when calling forumControllerEditMessage.");
        }
    }

    /**
     */
    forumControllerEditMessageContext(requestParameters: ForumControllerEditMessageRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/forum/thread/message/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "PATCH",
            headers: headerParameters,
            query: queryParameters,
            body: EditMessageDtoToJSON(requestParameters.editMessageDto),
        };
    }

    /**
     */
    forumControllerEditMessage = async (id: string, editMessageDto: EditMessageDto): Promise<ThreadMessageDTO> => {
        const response = await this.forumControllerEditMessageRaw({ id: id, editMessageDto: editMessageDto });
        return await response.value();
    }


    /**
     */
    private async forumControllerEmoticonsRaw(requestParameters: ForumControllerEmoticonsRequest): Promise<runtime.ApiResponse<Array<EmoticonDto>>> {
        this.forumControllerEmoticonsValidation(requestParameters);
        const context = this.forumControllerEmoticonsContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmoticonDtoFromJSON));
    }



    /**
     */
    private forumControllerEmoticonsValidation(requestParameters: ForumControllerEmoticonsRequest) {
    }

    /**
     */
    forumControllerEmoticonsContext(requestParameters: ForumControllerEmoticonsRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.steamId !== undefined) {
            queryParameters["steam_id"] = requestParameters.steamId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/forum/emoticons`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    forumControllerEmoticons = async (steamId?: string): Promise<Array<EmoticonDto>> => {
        const response = await this.forumControllerEmoticonsRaw({ steamId: steamId });
        return await response.value();
    }

    useForumControllerEmoticons(steamId?: string, config?: SWRConfiguration<Array<EmoticonDto>, Error>) {
        let valid = true

        const context = this.forumControllerEmoticonsContext({ steamId: steamId! });
        return useSWR(context, valid ? () => this.forumControllerEmoticons(steamId!) : null, config)
    }

    /**
     */
    private async forumControllerGetLatestPageRaw(requestParameters: ForumControllerGetLatestPageRequest): Promise<runtime.ApiResponse<ThreadMessagePageDTO>> {
        this.forumControllerGetLatestPageValidation(requestParameters);
        const context = this.forumControllerGetLatestPageContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadMessagePageDTOFromJSON(jsonValue));
    }



    /**
     */
    private forumControllerGetLatestPageValidation(requestParameters: ForumControllerGetLatestPageRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling forumControllerGetLatestPage.");
        }
        if (requestParameters.threadType === null || requestParameters.threadType === undefined) {
            throw new runtime.RequiredError("threadType","Required parameter requestParameters.threadType was null or undefined when calling forumControllerGetLatestPage.");
        }
    }

    /**
     */
    forumControllerGetLatestPageContext(requestParameters: ForumControllerGetLatestPageRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.perPage !== undefined) {
            queryParameters["perPage"] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/forum/thread/{id}/{threadType}/latestPage`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"threadType"}}`, encodeURIComponent(String(requestParameters.threadType))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    forumControllerGetLatestPage = async (id: string, threadType: ThreadType, perPage?: number): Promise<ThreadMessagePageDTO> => {
        const response = await this.forumControllerGetLatestPageRaw({ id: id, threadType: threadType, perPage: perPage });
        return await response.value();
    }

    useForumControllerGetLatestPage(id: string, threadType: ThreadType, perPage?: number, config?: SWRConfiguration<ThreadMessagePageDTO, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        if (threadType === null || threadType === undefined || Number.isNaN(threadType)) {
            valid = false
        }

        const context = this.forumControllerGetLatestPageContext({ id: id!, threadType: threadType!, perPage: perPage! });
        return useSWR(context, valid ? () => this.forumControllerGetLatestPage(id!, threadType!, perPage!) : null, config)
    }

    /**
     */
    private async forumControllerGetMessagesRaw(requestParameters: ForumControllerGetMessagesRequest): Promise<runtime.ApiResponse<Array<ThreadMessageDTO>>> {
        this.forumControllerGetMessagesValidation(requestParameters);
        const context = this.forumControllerGetMessagesContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ThreadMessageDTOFromJSON));
    }



    /**
     */
    private forumControllerGetMessagesValidation(requestParameters: ForumControllerGetMessagesRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling forumControllerGetMessages.");
        }
        if (requestParameters.threadType === null || requestParameters.threadType === undefined) {
            throw new runtime.RequiredError("threadType","Required parameter requestParameters.threadType was null or undefined when calling forumControllerGetMessages.");
        }
    }

    /**
     */
    forumControllerGetMessagesContext(requestParameters: ForumControllerGetMessagesRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.cursor !== undefined) {
            queryParameters["cursor"] = requestParameters.cursor;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        if (requestParameters.order !== undefined) {
            queryParameters["order"] = requestParameters.order;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/forum/thread/{id}/{threadType}/messages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"threadType"}}`, encodeURIComponent(String(requestParameters.threadType))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    forumControllerGetMessages = async (id: string, threadType: ThreadType, cursor?: string, limit?: number, order?: SortOrder): Promise<Array<ThreadMessageDTO>> => {
        const response = await this.forumControllerGetMessagesRaw({ id: id, threadType: threadType, cursor: cursor, limit: limit, order: order });
        return await response.value();
    }

    useForumControllerGetMessages(id: string, threadType: ThreadType, cursor?: string, limit?: number, order?: SortOrder, config?: SWRConfiguration<Array<ThreadMessageDTO>, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        if (threadType === null || threadType === undefined || Number.isNaN(threadType)) {
            valid = false
        }

        const context = this.forumControllerGetMessagesContext({ id: id!, threadType: threadType!, cursor: cursor!, limit: limit!, order: order! });
        return useSWR(context, valid ? () => this.forumControllerGetMessages(id!, threadType!, cursor!, limit!, order!) : null, config)
    }

    /**
     */
    private async forumControllerGetThreadRaw(requestParameters: ForumControllerGetThreadRequest): Promise<runtime.ApiResponse<ThreadDTO>> {
        this.forumControllerGetThreadValidation(requestParameters);
        const context = this.forumControllerGetThreadContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadDTOFromJSON(jsonValue));
    }



    /**
     */
    private forumControllerGetThreadValidation(requestParameters: ForumControllerGetThreadRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling forumControllerGetThread.");
        }
        if (requestParameters.threadType === null || requestParameters.threadType === undefined) {
            throw new runtime.RequiredError("threadType","Required parameter requestParameters.threadType was null or undefined when calling forumControllerGetThread.");
        }
    }

    /**
     */
    forumControllerGetThreadContext(requestParameters: ForumControllerGetThreadRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/forum/thread/{id}/{threadType}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"threadType"}}`, encodeURIComponent(String(requestParameters.threadType))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    forumControllerGetThread = async (id: string, threadType: ThreadType): Promise<ThreadDTO> => {
        const response = await this.forumControllerGetThreadRaw({ id: id, threadType: threadType });
        return await response.value();
    }

    useForumControllerGetThread(id: string, threadType: ThreadType, config?: SWRConfiguration<ThreadDTO, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        if (threadType === null || threadType === undefined || Number.isNaN(threadType)) {
            valid = false
        }

        const context = this.forumControllerGetThreadContext({ id: id!, threadType: threadType! });
        return useSWR(context, valid ? () => this.forumControllerGetThread(id!, threadType!) : null, config)
    }

    /**
     */
    private async forumControllerGetUserRaw(requestParameters: ForumControllerGetUserRequest): Promise<runtime.ApiResponse<ForumUserDto>> {
        this.forumControllerGetUserValidation(requestParameters);
        const context = this.forumControllerGetUserContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForumUserDtoFromJSON(jsonValue));
    }



    /**
     */
    private forumControllerGetUserValidation(requestParameters: ForumControllerGetUserRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling forumControllerGetUser.");
        }
    }

    /**
     */
    forumControllerGetUserContext(requestParameters: ForumControllerGetUserRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/forum/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    forumControllerGetUser = async (id: string): Promise<ForumUserDto> => {
        const response = await this.forumControllerGetUserRaw({ id: id });
        return await response.value();
    }

    useForumControllerGetUser(id: string, config?: SWRConfiguration<ForumUserDto, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        const context = this.forumControllerGetUserContext({ id: id! });
        return useSWR(context, valid ? () => this.forumControllerGetUser(id!) : null, config)
    }

    /**
     */
    private async forumControllerMessagesPageRaw(requestParameters: ForumControllerMessagesPageRequest): Promise<runtime.ApiResponse<ThreadMessagePageDTO>> {
        this.forumControllerMessagesPageValidation(requestParameters);
        const context = this.forumControllerMessagesPageContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadMessagePageDTOFromJSON(jsonValue));
    }



    /**
     */
    private forumControllerMessagesPageValidation(requestParameters: ForumControllerMessagesPageRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling forumControllerMessagesPage.");
        }
        if (requestParameters.threadType === null || requestParameters.threadType === undefined) {
            throw new runtime.RequiredError("threadType","Required parameter requestParameters.threadType was null or undefined when calling forumControllerMessagesPage.");
        }
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError("page","Required parameter requestParameters.page was null or undefined when calling forumControllerMessagesPage.");
        }
    }

    /**
     */
    forumControllerMessagesPageContext(requestParameters: ForumControllerMessagesPageRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters["page"] = requestParameters.page;
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters["cursor"] = requestParameters.cursor;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters["per_page"] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/forum/thread/{id}/{threadType}/page`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"threadType"}}`, encodeURIComponent(String(requestParameters.threadType))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    forumControllerMessagesPage = async (id: string, threadType: ThreadType, page: number, cursor?: string, perPage?: number): Promise<ThreadMessagePageDTO> => {
        const response = await this.forumControllerMessagesPageRaw({ id: id, threadType: threadType, page: page, cursor: cursor, perPage: perPage });
        return await response.value();
    }

    useForumControllerMessagesPage(id: string, threadType: ThreadType, page: number, cursor?: string, perPage?: number, config?: SWRConfiguration<ThreadMessagePageDTO, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        if (threadType === null || threadType === undefined || Number.isNaN(threadType)) {
            valid = false
        }

        if (page === null || page === undefined || Number.isNaN(page)) {
            valid = false
        }

        const context = this.forumControllerMessagesPageContext({ id: id!, threadType: threadType!, page: page!, cursor: cursor!, perPage: perPage! });
        return useSWR(context, valid ? () => this.forumControllerMessagesPage(id!, threadType!, page!, cursor!, perPage!) : null, config)
    }

    /**
     */
    private async forumControllerPostMessageRaw(requestParameters: ForumControllerPostMessageRequest): Promise<runtime.ApiResponse<ThreadMessageDTO>> {
        this.forumControllerPostMessageValidation(requestParameters);
        const context = this.forumControllerPostMessageContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadMessageDTOFromJSON(jsonValue));
    }



    /**
     */
    private forumControllerPostMessageValidation(requestParameters: ForumControllerPostMessageRequest) {
        if (requestParameters.createMessageDTO === null || requestParameters.createMessageDTO === undefined) {
            throw new runtime.RequiredError("createMessageDTO","Required parameter requestParameters.createMessageDTO was null or undefined when calling forumControllerPostMessage.");
        }
    }

    /**
     */
    forumControllerPostMessageContext(requestParameters: ForumControllerPostMessageRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/forum/thread/message`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: CreateMessageDTOToJSON(requestParameters.createMessageDTO),
        };
    }

    /**
     */
    forumControllerPostMessage = async (createMessageDTO: CreateMessageDTO): Promise<ThreadMessageDTO> => {
        const response = await this.forumControllerPostMessageRaw({ createMessageDTO: createMessageDTO });
        return await response.value();
    }


    /**
     */
    private async forumControllerReactRaw(requestParameters: ForumControllerReactRequest): Promise<runtime.ApiResponse<ThreadMessageDTO>> {
        this.forumControllerReactValidation(requestParameters);
        const context = this.forumControllerReactContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadMessageDTOFromJSON(jsonValue));
    }



    /**
     */
    private forumControllerReactValidation(requestParameters: ForumControllerReactRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling forumControllerReact.");
        }
        if (requestParameters.updateMessageReactionDto === null || requestParameters.updateMessageReactionDto === undefined) {
            throw new runtime.RequiredError("updateMessageReactionDto","Required parameter requestParameters.updateMessageReactionDto was null or undefined when calling forumControllerReact.");
        }
    }

    /**
     */
    forumControllerReactContext(requestParameters: ForumControllerReactRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/forum/thread/message/{id}/react`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMessageReactionDtoToJSON(requestParameters.updateMessageReactionDto),
        };
    }

    /**
     */
    forumControllerReact = async (id: string, updateMessageReactionDto: UpdateMessageReactionDto): Promise<ThreadMessageDTO> => {
        const response = await this.forumControllerReactRaw({ id: id, updateMessageReactionDto: updateMessageReactionDto });
        return await response.value();
    }


    /**
     */
    private async forumControllerThreadRaw(requestParameters: ForumControllerThreadRequest): Promise<runtime.ApiResponse<ThreadMessageSseDto>> {
        this.forumControllerThreadValidation(requestParameters);
        const context = this.forumControllerThreadContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadMessageSseDtoFromJSON(jsonValue));
    }



    /**
     */
    private forumControllerThreadValidation(requestParameters: ForumControllerThreadRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling forumControllerThread.");
        }
        if (requestParameters.threadType === null || requestParameters.threadType === undefined) {
            throw new runtime.RequiredError("threadType","Required parameter requestParameters.threadType was null or undefined when calling forumControllerThread.");
        }
    }

    /**
     */
    forumControllerThreadContext(requestParameters: ForumControllerThreadRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/forum/thread/{id}/{threadType}/sse`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"threadType"}}`, encodeURIComponent(String(requestParameters.threadType))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    forumControllerThread = async (id: string, threadType: ThreadType): Promise<ThreadMessageSseDto> => {
        const response = await this.forumControllerThreadRaw({ id: id, threadType: threadType });
        return await response.value();
    }

    useForumControllerThread(id: string, threadType: ThreadType, config?: SWRConfiguration<ThreadMessageSseDto, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        if (threadType === null || threadType === undefined || Number.isNaN(threadType)) {
            valid = false
        }

        const context = this.forumControllerThreadContext({ id: id!, threadType: threadType! });
        return useSWR(context, valid ? () => this.forumControllerThread(id!, threadType!) : null, config)
    }

    /**
     */
    private async forumControllerThreadsRaw(requestParameters: ForumControllerThreadsRequest): Promise<runtime.ApiResponse<ThreadPageDTO>> {
        this.forumControllerThreadsValidation(requestParameters);
        const context = this.forumControllerThreadsContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadPageDTOFromJSON(jsonValue));
    }



    /**
     */
    private forumControllerThreadsValidation(requestParameters: ForumControllerThreadsRequest) {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError("page","Required parameter requestParameters.page was null or undefined when calling forumControllerThreads.");
        }
        if (requestParameters.onlyAuthored === null || requestParameters.onlyAuthored === undefined) {
            throw new runtime.RequiredError("onlyAuthored","Required parameter requestParameters.onlyAuthored was null or undefined when calling forumControllerThreads.");
        }
    }

    /**
     */
    forumControllerThreadsContext(requestParameters: ForumControllerThreadsRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters["page"] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters["per_page"] = requestParameters.perPage;
        }

        if (requestParameters.threadType !== undefined) {
            queryParameters["threadType"] = requestParameters.threadType;
        }

        if (requestParameters.onlyAuthored !== undefined) {
            queryParameters["only_authored"] = requestParameters.onlyAuthored;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/forum/threads`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    forumControllerThreads = async (page: number, onlyAuthored: boolean, perPage?: number, threadType?: ThreadType): Promise<ThreadPageDTO> => {
        const response = await this.forumControllerThreadsRaw({ page: page, onlyAuthored: onlyAuthored, perPage: perPage, threadType: threadType });
        return await response.value();
    }

    useForumControllerThreads(page: number, onlyAuthored: boolean, perPage?: number, threadType?: ThreadType, config?: SWRConfiguration<ThreadPageDTO, Error>) {
        let valid = true

        if (page === null || page === undefined || Number.isNaN(page)) {
            valid = false
        }

        if (onlyAuthored === null || onlyAuthored === undefined || Number.isNaN(onlyAuthored)) {
            valid = false
        }

        const context = this.forumControllerThreadsContext({ page: page!, onlyAuthored: onlyAuthored!, perPage: perPage!, threadType: threadType! });
        return useSWR(context, valid ? () => this.forumControllerThreads(page!, onlyAuthored!, perPage!, threadType!) : null, config)
    }

    /**
     */
    private async forumControllerUpdateThreadRaw(requestParameters: ForumControllerUpdateThreadRequest): Promise<runtime.ApiResponse<ThreadDTO>> {
        this.forumControllerUpdateThreadValidation(requestParameters);
        const context = this.forumControllerUpdateThreadContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadDTOFromJSON(jsonValue));
    }



    /**
     */
    private forumControllerUpdateThreadValidation(requestParameters: ForumControllerUpdateThreadRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling forumControllerUpdateThread.");
        }
        if (requestParameters.updateThreadDTO === null || requestParameters.updateThreadDTO === undefined) {
            throw new runtime.RequiredError("updateThreadDTO","Required parameter requestParameters.updateThreadDTO was null or undefined when calling forumControllerUpdateThread.");
        }
    }

    /**
     */
    forumControllerUpdateThreadContext(requestParameters: ForumControllerUpdateThreadRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/forum/thread/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "PATCH",
            headers: headerParameters,
            query: queryParameters,
            body: UpdateThreadDTOToJSON(requestParameters.updateThreadDTO),
        };
    }

    /**
     */
    forumControllerUpdateThread = async (id: string, updateThreadDTO: UpdateThreadDTO): Promise<ThreadDTO> => {
        const response = await this.forumControllerUpdateThreadRaw({ id: id, updateThreadDTO: updateThreadDTO });
        return await response.value();
    }


    /**
     */
    private async forumControllerUpdateUserRaw(requestParameters: ForumControllerUpdateUserRequest): Promise<runtime.ApiResponse<number>> {
        this.forumControllerUpdateUserValidation(requestParameters);
        const context = this.forumControllerUpdateUserContext(requestParameters);
        const response = await this.request(context);

        return new runtime.TextApiResponse(response) as any;
    }



    /**
     */
    private forumControllerUpdateUserValidation(requestParameters: ForumControllerUpdateUserRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling forumControllerUpdateUser.");
        }
        if (requestParameters.updateUserDTO === null || requestParameters.updateUserDTO === undefined) {
            throw new runtime.RequiredError("updateUserDTO","Required parameter requestParameters.updateUserDTO was null or undefined when calling forumControllerUpdateUser.");
        }
    }

    /**
     */
    forumControllerUpdateUserContext(requestParameters: ForumControllerUpdateUserRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/forum/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "PATCH",
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserDTOToJSON(requestParameters.updateUserDTO),
        };
    }

    /**
     */
    forumControllerUpdateUser = async (id: string, updateUserDTO: UpdateUserDTO): Promise<number> => {
        const response = await this.forumControllerUpdateUserRaw({ id: id, updateUserDTO: updateUserDTO });
        return await response.value();
    }


}
