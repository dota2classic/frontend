/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR from "swr";
import { SWRConfiguration } from "swr/_internal";

import {
  CreateMessageDTO,
  CreateMessageDTOToJSON,
  ThreadMessageDTO,
  ThreadMessageDTOFromJSON,
  ThreadMessageSseDto,
  ThreadMessageSseDtoFromJSON,
} from "../models";

export interface ForumControllerGetMessagesRequest {
  id: string;
  threadType: string;
  after?: number;
  limit?: number;
}

export interface ForumControllerPostMessageRequest {
  createMessageDTO: CreateMessageDTO;
}

export interface ForumControllerThreadRequest {
  id: string;
  threadType: string;
}

/**
 *
 */
export class ForumApi extends runtime.BaseAPI {
  /**
   */
  forumControllerGetMessagesContext(
    requestParameters: ForumControllerGetMessagesRequest,
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    if (requestParameters.after !== undefined) {
      queryParameters["after"] = requestParameters.after;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters["limit"] = requestParameters.limit;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/v1/forum/thread/{id}/{threadType}/messages`
        .replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id)))
        .replace(
          `{${"threadType"}}`,
          encodeURIComponent(String(requestParameters.threadType)),
        ),
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  forumControllerGetMessages = async (
    id: string,
    threadType: string,
    after?: number,
    limit?: number,
  ): Promise<Array<ThreadMessageDTO>> => {
    const response = await this.forumControllerGetMessagesRaw({
      id: id,
      threadType: threadType,
      after: after,
      limit: limit,
    });
    return await response.value();
  };

  useForumControllerGetMessages(
    id: string,
    threadType: string,
    after?: number,
    limit?: number,
    config?: SWRConfiguration<Array<ThreadMessageDTO>, Error>,
  ) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    if (
      threadType === null ||
      threadType === undefined ||
      Number.isNaN(threadType)
    ) {
      valid = false;
    }

    const context = this.forumControllerGetMessagesContext({
      id: id!,
      threadType: threadType!,
      after: after!,
      limit: limit!,
    });
    return useSWR(
      context,
      valid
        ? () =>
            this.forumControllerGetMessages(id!, threadType!, after!, limit!)
        : null,
      config,
    );
  }

  /**
   */
  forumControllerPostMessageContext(
    requestParameters: ForumControllerPostMessageRequest,
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString =
        typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/v1/forum/thread/message`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: CreateMessageDTOToJSON(requestParameters.createMessageDTO),
    };
  }

  /**
   */
  forumControllerPostMessage = async (
    createMessageDTO: CreateMessageDTO,
  ): Promise<ThreadMessageDTO> => {
    const response = await this.forumControllerPostMessageRaw({
      createMessageDTO: createMessageDTO,
    });
    return await response.value();
  };

  /**
   */
  forumControllerThreadContext(
    requestParameters: ForumControllerThreadRequest,
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/v1/forum/thread/{id}/{threadType}`
        .replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id)))
        .replace(
          `{${"threadType"}}`,
          encodeURIComponent(String(requestParameters.threadType)),
        ),
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  forumControllerThread = async (
    id: string,
    threadType: string,
  ): Promise<ThreadMessageSseDto> => {
    const response = await this.forumControllerThreadRaw({
      id: id,
      threadType: threadType,
    });
    return await response.value();
  };

  /**
   */
  private async forumControllerGetMessagesRaw(
    requestParameters: ForumControllerGetMessagesRequest,
  ): Promise<runtime.ApiResponse<Array<ThreadMessageDTO>>> {
    this.forumControllerGetMessagesValidation(requestParameters);
    const context = this.forumControllerGetMessagesContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ThreadMessageDTOFromJSON),
    );
  }

  /**
   */
  private forumControllerGetMessagesValidation(
    requestParameters: ForumControllerGetMessagesRequest,
  ) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling forumControllerGetMessages.",
      );
    }
    if (
      requestParameters.threadType === null ||
      requestParameters.threadType === undefined
    ) {
      throw new runtime.RequiredError(
        "threadType",
        "Required parameter requestParameters.threadType was null or undefined when calling forumControllerGetMessages.",
      );
    }
  }

  /**
   */
  private async forumControllerPostMessageRaw(
    requestParameters: ForumControllerPostMessageRequest,
  ): Promise<runtime.ApiResponse<ThreadMessageDTO>> {
    this.forumControllerPostMessageValidation(requestParameters);
    const context = this.forumControllerPostMessageContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ThreadMessageDTOFromJSON(jsonValue),
    );
  }

  /**
   */
  private forumControllerPostMessageValidation(
    requestParameters: ForumControllerPostMessageRequest,
  ) {
    if (
      requestParameters.createMessageDTO === null ||
      requestParameters.createMessageDTO === undefined
    ) {
      throw new runtime.RequiredError(
        "createMessageDTO",
        "Required parameter requestParameters.createMessageDTO was null or undefined when calling forumControllerPostMessage.",
      );
    }
  }

  /**
   */
  private async forumControllerThreadRaw(
    requestParameters: ForumControllerThreadRequest,
  ): Promise<runtime.ApiResponse<ThreadMessageSseDto>> {
    this.forumControllerThreadValidation(requestParameters);
    const context = this.forumControllerThreadContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ThreadMessageSseDtoFromJSON(jsonValue),
    );
  }

  /**
   */
  private forumControllerThreadValidation(
    requestParameters: ForumControllerThreadRequest,
  ) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling forumControllerThread.",
      );
    }
    if (
      requestParameters.threadType === null ||
      requestParameters.threadType === undefined
    ) {
      throw new runtime.RequiredError(
        "threadType",
        "Required parameter requestParameters.threadType was null or undefined when calling forumControllerThread.",
      );
    }
  }

  useForumControllerThread(
    id: string,
    threadType: string,
    config?: SWRConfiguration<ThreadMessageSseDto, Error>,
  ) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    if (
      threadType === null ||
      threadType === undefined ||
      Number.isNaN(threadType)
    ) {
      valid = false;
    }

    const context = this.forumControllerThreadContext({
      id: id!,
      threadType: threadType!,
    });
    return useSWR(
      context,
      valid ? () => this.forumControllerThread(id!, threadType!) : null,
      config,
    );
  }
}
