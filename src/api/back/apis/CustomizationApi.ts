/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";
import useSWR from "swr";
import { SWRConfiguration } from "swr/_internal";

import {
  CreateDecorationDto,
  CreateDecorationDtoFromJSON,
  CreateDecorationDtoToJSON,
  ProfileDecorationDto,
  ProfileDecorationDtoFromJSON,
  ProfileDecorationDtoToJSON,
  SelectDecorationDto,
  SelectDecorationDtoFromJSON,
  SelectDecorationDtoToJSON,
  UpdateDecorationDto,
  UpdateDecorationDtoFromJSON,
  UpdateDecorationDtoToJSON,
} from "../models";

export interface CustomizationControllerCreateDecorationRequest {
  createDecorationDto: CreateDecorationDto;
}

export interface CustomizationControllerSelectDecorationRequest {
  selectDecorationDto: SelectDecorationDto;
}

export interface CustomizationControllerUpdateDecorationRequest {
  id: number;
  updateDecorationDto: UpdateDecorationDto;
}

/**
 * 
 */
export class CustomizationApi extends runtime.BaseAPI {

    /**
     */
    private async customizationControllerAllRaw(): Promise<runtime.ApiResponse<Array<ProfileDecorationDto>>> {
        this.customizationControllerAllValidation();
        const context = this.customizationControllerAllContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProfileDecorationDtoFromJSON));
    }



    /**
     */
    private customizationControllerAllValidation() {
    }

    /**
     */
    customizationControllerAllContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/customization`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    customizationControllerAll = async (): Promise<Array<ProfileDecorationDto>> => {
        const response = await this.customizationControllerAllRaw();
        return await response.value();
    }

    useCustomizationControllerAll(config?: SWRConfiguration<Array<ProfileDecorationDto>, Error>) {
        let valid = true

        const context = this.customizationControllerAllContext();
        return useSWR(context, valid ? () => this.customizationControllerAll() : null, config)
    }

    /**
     */
    private async customizationControllerCreateDecorationRaw(requestParameters: CustomizationControllerCreateDecorationRequest): Promise<runtime.ApiResponse<ProfileDecorationDto>> {
        this.customizationControllerCreateDecorationValidation(requestParameters);
        const context = this.customizationControllerCreateDecorationContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileDecorationDtoFromJSON(jsonValue));
    }



    /**
     */
    private customizationControllerCreateDecorationValidation(requestParameters: CustomizationControllerCreateDecorationRequest) {
        if (requestParameters.createDecorationDto === null || requestParameters.createDecorationDto === undefined) {
            throw new runtime.RequiredError("createDecorationDto","Required parameter requestParameters.createDecorationDto was null or undefined when calling customizationControllerCreateDecoration.");
        }
    }

    /**
     */
    customizationControllerCreateDecorationContext(requestParameters: CustomizationControllerCreateDecorationRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/customization`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: CreateDecorationDtoToJSON(requestParameters.createDecorationDto),
        };
    }

    /**
     */
    customizationControllerCreateDecoration = async (createDecorationDto: CreateDecorationDto): Promise<ProfileDecorationDto> => {
        const response = await this.customizationControllerCreateDecorationRaw({ createDecorationDto: createDecorationDto });
        return await response.value();
    }


    /**
     */
    private async customizationControllerSelectDecorationRaw(requestParameters: CustomizationControllerSelectDecorationRequest): Promise<runtime.ApiResponse<void>> {
        this.customizationControllerSelectDecorationValidation(requestParameters);
        const context = this.customizationControllerSelectDecorationContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }



    /**
     */
    private customizationControllerSelectDecorationValidation(requestParameters: CustomizationControllerSelectDecorationRequest) {
        if (requestParameters.selectDecorationDto === null || requestParameters.selectDecorationDto === undefined) {
            throw new runtime.RequiredError("selectDecorationDto","Required parameter requestParameters.selectDecorationDto was null or undefined when calling customizationControllerSelectDecoration.");
        }
    }

    /**
     */
    customizationControllerSelectDecorationContext(requestParameters: CustomizationControllerSelectDecorationRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/customization/selectDecoration`,
            method: "PATCH",
            headers: headerParameters,
            query: queryParameters,
            body: SelectDecorationDtoToJSON(requestParameters.selectDecorationDto),
        };
    }

    /**
     */
    customizationControllerSelectDecoration = async (selectDecorationDto: SelectDecorationDto): Promise<void> => {
        await this.customizationControllerSelectDecorationRaw({ selectDecorationDto: selectDecorationDto });
    }


    /**
     */
    private async customizationControllerUpdateDecorationRaw(requestParameters: CustomizationControllerUpdateDecorationRequest): Promise<runtime.ApiResponse<ProfileDecorationDto>> {
        this.customizationControllerUpdateDecorationValidation(requestParameters);
        const context = this.customizationControllerUpdateDecorationContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileDecorationDtoFromJSON(jsonValue));
    }



    /**
     */
    private customizationControllerUpdateDecorationValidation(requestParameters: CustomizationControllerUpdateDecorationRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling customizationControllerUpdateDecoration.");
        }
        if (requestParameters.updateDecorationDto === null || requestParameters.updateDecorationDto === undefined) {
            throw new runtime.RequiredError("updateDecorationDto","Required parameter requestParameters.updateDecorationDto was null or undefined when calling customizationControllerUpdateDecoration.");
        }
    }

    /**
     */
    customizationControllerUpdateDecorationContext(requestParameters: CustomizationControllerUpdateDecorationRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/customization/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "PATCH",
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDecorationDtoToJSON(requestParameters.updateDecorationDto),
        };
    }

    /**
     */
    customizationControllerUpdateDecoration = async (id: number, updateDecorationDto: UpdateDecorationDto): Promise<ProfileDecorationDto> => {
        const response = await this.customizationControllerUpdateDecorationRaw({ id: id, updateDecorationDto: updateDecorationDto });
        return await response.value();
    }


}
