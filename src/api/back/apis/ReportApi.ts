/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";
import useSWR from "swr";
import { SWRConfiguration } from "swr/_internal";

import {
  ApplyPunishmentDto,
  ApplyPunishmentDtoFromJSON,
  ApplyPunishmentDtoToJSON,
  HandleReportDto,
  HandleReportDtoFromJSON,
  HandleReportDtoToJSON,
  PunishmentLogPageDto,
  PunishmentLogPageDtoFromJSON,
  PunishmentLogPageDtoToJSON,
  ReportDto,
  ReportDtoFromJSON,
  ReportDtoToJSON,
  ReportMessageDto,
  ReportMessageDtoFromJSON,
  ReportMessageDtoToJSON,
  ReportPageDto,
  ReportPageDtoFromJSON,
  ReportPageDtoToJSON,
  ReportPlayerInMatchDto,
  ReportPlayerInMatchDtoFromJSON,
  ReportPlayerInMatchDtoToJSON,
} from "../models";

export interface ReportControllerApplyPunishmentRequest {
  applyPunishmentDto: ApplyPunishmentDto;
}

export interface ReportControllerGetPaginationLogRequest {
  page: number;
  perPage?: number;
}

export interface ReportControllerGetReportRequest {
  id: string;
}

export interface ReportControllerGetReportPageRequest {
  page: number;
  perPage?: number;
}

export interface ReportControllerHandleReportRequest {
  id: string;
  handleReportDto: HandleReportDto;
}

export interface ReportControllerReportMessageRequest {
  reportMessageDto: ReportMessageDto;
}

export interface ReportControllerReportPlayerInMatchRequest {
  reportPlayerInMatchDto: ReportPlayerInMatchDto;
}

/**
 * 
 */
export class ReportApi extends runtime.BaseAPI {

    /**
     */
    private async reportControllerApplyPunishmentRaw(requestParameters: ReportControllerApplyPunishmentRequest): Promise<runtime.ApiResponse<void>> {
        this.reportControllerApplyPunishmentValidation(requestParameters);
        const context = this.reportControllerApplyPunishmentContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }



    /**
     */
    private reportControllerApplyPunishmentValidation(requestParameters: ReportControllerApplyPunishmentRequest) {
        if (requestParameters.applyPunishmentDto === null || requestParameters.applyPunishmentDto === undefined) {
            throw new runtime.RequiredError("applyPunishmentDto","Required parameter requestParameters.applyPunishmentDto was null or undefined when calling reportControllerApplyPunishment.");
        }
    }

    /**
     */
    reportControllerApplyPunishmentContext(requestParameters: ReportControllerApplyPunishmentRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/report/admin/punish`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ApplyPunishmentDtoToJSON(requestParameters.applyPunishmentDto),
        };
    }

    /**
     */
    reportControllerApplyPunishment = async (applyPunishmentDto: ApplyPunishmentDto): Promise<void> => {
        await this.reportControllerApplyPunishmentRaw({ applyPunishmentDto: applyPunishmentDto });
    }


    /**
     */
    private async reportControllerGetPaginationLogRaw(requestParameters: ReportControllerGetPaginationLogRequest): Promise<runtime.ApiResponse<PunishmentLogPageDto>> {
        this.reportControllerGetPaginationLogValidation(requestParameters);
        const context = this.reportControllerGetPaginationLogContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => PunishmentLogPageDtoFromJSON(jsonValue));
    }



    /**
     */
    private reportControllerGetPaginationLogValidation(requestParameters: ReportControllerGetPaginationLogRequest) {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError("page","Required parameter requestParameters.page was null or undefined when calling reportControllerGetPaginationLog.");
        }
    }

    /**
     */
    reportControllerGetPaginationLogContext(requestParameters: ReportControllerGetPaginationLogRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters["page"] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters["per_page"] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/report/punishment`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    reportControllerGetPaginationLog = async (page: number, perPage?: number): Promise<PunishmentLogPageDto> => {
        const response = await this.reportControllerGetPaginationLogRaw({ page: page, perPage: perPage });
        return await response.value();
    }

    useReportControllerGetPaginationLog(page: number, perPage?: number, config?: SWRConfiguration<PunishmentLogPageDto, Error>) {
        let valid = true

        if (page === null || page === undefined || Number.isNaN(page)) {
            valid = false
        }

        const context = this.reportControllerGetPaginationLogContext({ page: page!, perPage: perPage! });
        return useSWR(context, valid ? () => this.reportControllerGetPaginationLog(page!, perPage!) : null, config)
    }

    /**
     */
    private async reportControllerGetReportRaw(requestParameters: ReportControllerGetReportRequest): Promise<runtime.ApiResponse<ReportDto>> {
        this.reportControllerGetReportValidation(requestParameters);
        const context = this.reportControllerGetReportContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportDtoFromJSON(jsonValue));
    }



    /**
     */
    private reportControllerGetReportValidation(requestParameters: ReportControllerGetReportRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling reportControllerGetReport.");
        }
    }

    /**
     */
    reportControllerGetReportContext(requestParameters: ReportControllerGetReportRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/report/report/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    reportControllerGetReport = async (id: string): Promise<ReportDto> => {
        const response = await this.reportControllerGetReportRaw({ id: id });
        return await response.value();
    }

    useReportControllerGetReport(id: string, config?: SWRConfiguration<ReportDto, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        const context = this.reportControllerGetReportContext({ id: id! });
        return useSWR(context, valid ? () => this.reportControllerGetReport(id!) : null, config)
    }

    /**
     */
    private async reportControllerGetReportPageRaw(requestParameters: ReportControllerGetReportPageRequest): Promise<runtime.ApiResponse<ReportPageDto>> {
        this.reportControllerGetReportPageValidation(requestParameters);
        const context = this.reportControllerGetReportPageContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportPageDtoFromJSON(jsonValue));
    }



    /**
     */
    private reportControllerGetReportPageValidation(requestParameters: ReportControllerGetReportPageRequest) {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError("page","Required parameter requestParameters.page was null or undefined when calling reportControllerGetReportPage.");
        }
    }

    /**
     */
    reportControllerGetReportPageContext(requestParameters: ReportControllerGetReportPageRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters["page"] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters["per_page"] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/report/reports`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    reportControllerGetReportPage = async (page: number, perPage?: number): Promise<ReportPageDto> => {
        const response = await this.reportControllerGetReportPageRaw({ page: page, perPage: perPage });
        return await response.value();
    }

    useReportControllerGetReportPage(page: number, perPage?: number, config?: SWRConfiguration<ReportPageDto, Error>) {
        let valid = true

        if (page === null || page === undefined || Number.isNaN(page)) {
            valid = false
        }

        const context = this.reportControllerGetReportPageContext({ page: page!, perPage: perPage! });
        return useSWR(context, valid ? () => this.reportControllerGetReportPage(page!, perPage!) : null, config)
    }

    /**
     */
    private async reportControllerHandleReportRaw(requestParameters: ReportControllerHandleReportRequest): Promise<runtime.ApiResponse<ReportDto>> {
        this.reportControllerHandleReportValidation(requestParameters);
        const context = this.reportControllerHandleReportContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportDtoFromJSON(jsonValue));
    }



    /**
     */
    private reportControllerHandleReportValidation(requestParameters: ReportControllerHandleReportRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling reportControllerHandleReport.");
        }
        if (requestParameters.handleReportDto === null || requestParameters.handleReportDto === undefined) {
            throw new runtime.RequiredError("handleReportDto","Required parameter requestParameters.handleReportDto was null or undefined when calling reportControllerHandleReport.");
        }
    }

    /**
     */
    reportControllerHandleReportContext(requestParameters: ReportControllerHandleReportRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/report/report/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: HandleReportDtoToJSON(requestParameters.handleReportDto),
        };
    }

    /**
     */
    reportControllerHandleReport = async (id: string, handleReportDto: HandleReportDto): Promise<ReportDto> => {
        const response = await this.reportControllerHandleReportRaw({ id: id, handleReportDto: handleReportDto });
        return await response.value();
    }


    /**
     */
    private async reportControllerReportMessageRaw(requestParameters: ReportControllerReportMessageRequest): Promise<runtime.ApiResponse<void>> {
        this.reportControllerReportMessageValidation(requestParameters);
        const context = this.reportControllerReportMessageContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }



    /**
     */
    private reportControllerReportMessageValidation(requestParameters: ReportControllerReportMessageRequest) {
        if (requestParameters.reportMessageDto === null || requestParameters.reportMessageDto === undefined) {
            throw new runtime.RequiredError("reportMessageDto","Required parameter requestParameters.reportMessageDto was null or undefined when calling reportControllerReportMessage.");
        }
    }

    /**
     */
    reportControllerReportMessageContext(requestParameters: ReportControllerReportMessageRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/report/message`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ReportMessageDtoToJSON(requestParameters.reportMessageDto),
        };
    }

    /**
     */
    reportControllerReportMessage = async (reportMessageDto: ReportMessageDto): Promise<void> => {
        await this.reportControllerReportMessageRaw({ reportMessageDto: reportMessageDto });
    }


    /**
     */
    private async reportControllerReportPlayerInMatchRaw(requestParameters: ReportControllerReportPlayerInMatchRequest): Promise<runtime.ApiResponse<void>> {
        this.reportControllerReportPlayerInMatchValidation(requestParameters);
        const context = this.reportControllerReportPlayerInMatchContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }



    /**
     */
    private reportControllerReportPlayerInMatchValidation(requestParameters: ReportControllerReportPlayerInMatchRequest) {
        if (requestParameters.reportPlayerInMatchDto === null || requestParameters.reportPlayerInMatchDto === undefined) {
            throw new runtime.RequiredError("reportPlayerInMatchDto","Required parameter requestParameters.reportPlayerInMatchDto was null or undefined when calling reportControllerReportPlayerInMatch.");
        }
    }

    /**
     */
    reportControllerReportPlayerInMatchContext(requestParameters: ReportControllerReportPlayerInMatchRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/report/match`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ReportPlayerInMatchDtoToJSON(requestParameters.reportPlayerInMatchDto),
        };
    }

    /**
     */
    reportControllerReportPlayerInMatch = async (reportPlayerInMatchDto: ReportPlayerInMatchDto): Promise<void> => {
        await this.reportControllerReportPlayerInMatchRaw({ reportPlayerInMatchDto: reportPlayerInMatchDto });
    }


}
