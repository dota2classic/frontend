/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";
import useSWR from "swr";
import { SWRConfiguration } from "swr/_internal";

import {
  ReportMessageDto,
  ReportMessageDtoFromJSON,
  ReportMessageDtoToJSON,
  ReportPlayerInMatchDto,
  ReportPlayerInMatchDtoFromJSON,
  ReportPlayerInMatchDtoToJSON,
} from "../models";

export interface ReportControllerReportMessageRequest {
  reportMessageDto: ReportMessageDto;
}

export interface ReportControllerReportPlayerInMatchRequest {
  reportPlayerInMatchDto: ReportPlayerInMatchDto;
}

/**
 * 
 */
export class ReportApi extends runtime.BaseAPI {

    /**
     */
    private async reportControllerReportMessageRaw(requestParameters: ReportControllerReportMessageRequest): Promise<runtime.ApiResponse<void>> {
        this.reportControllerReportMessageValidation(requestParameters);
        const context = this.reportControllerReportMessageContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }



    /**
     */
    private reportControllerReportMessageValidation(requestParameters: ReportControllerReportMessageRequest) {
        if (requestParameters.reportMessageDto === null || requestParameters.reportMessageDto === undefined) {
            throw new runtime.RequiredError("reportMessageDto","Required parameter requestParameters.reportMessageDto was null or undefined when calling reportControllerReportMessage.");
        }
    }

    /**
     */
    reportControllerReportMessageContext(requestParameters: ReportControllerReportMessageRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/report/message`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ReportMessageDtoToJSON(requestParameters.reportMessageDto),
        };
    }

    /**
     */
    reportControllerReportMessage = async (reportMessageDto: ReportMessageDto): Promise<void> => {
        await this.reportControllerReportMessageRaw({ reportMessageDto: reportMessageDto });
    }


    /**
     */
    private async reportControllerReportPlayerInMatchRaw(requestParameters: ReportControllerReportPlayerInMatchRequest): Promise<runtime.ApiResponse<void>> {
        this.reportControllerReportPlayerInMatchValidation(requestParameters);
        const context = this.reportControllerReportPlayerInMatchContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }



    /**
     */
    private reportControllerReportPlayerInMatchValidation(requestParameters: ReportControllerReportPlayerInMatchRequest) {
        if (requestParameters.reportPlayerInMatchDto === null || requestParameters.reportPlayerInMatchDto === undefined) {
            throw new runtime.RequiredError("reportPlayerInMatchDto","Required parameter requestParameters.reportPlayerInMatchDto was null or undefined when calling reportControllerReportPlayerInMatch.");
        }
    }

    /**
     */
    reportControllerReportPlayerInMatchContext(requestParameters: ReportControllerReportPlayerInMatchRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/report/match`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ReportPlayerInMatchDtoToJSON(requestParameters.reportPlayerInMatchDto),
        };
    }

    /**
     */
    reportControllerReportPlayerInMatch = async (reportPlayerInMatchDto: ReportPlayerInMatchDto): Promise<void> => {
        await this.reportControllerReportPlayerInMatchRaw({ reportPlayerInMatchDto: reportPlayerInMatchDto });
    }


}
