/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR from "swr";
import { SWRConfiguration } from "swr/_internal";

import {
  CurrentOnlineDto,
  CurrentOnlineDtoFromJSON,
  CurrentOnlineDtoToJSON,
  MatchmakingInfo,
  MatchmakingInfoFromJSON,
  MatchmakingInfoToJSON,
} from "../models";

/**
 * 
 */
export class StatsApi extends runtime.BaseAPI {

    /**
     */
    private async statsControllerGetMatchmakingInfoRaw(): Promise<runtime.ApiResponse<Array<MatchmakingInfo>>> {
        this.statsControllerGetMatchmakingInfoValidation();
        const context = this.statsControllerGetMatchmakingInfoContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MatchmakingInfoFromJSON));
    }



    /**
     */
    private statsControllerGetMatchmakingInfoValidation() {
    }

    /**
     */
    statsControllerGetMatchmakingInfoContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/stats/matchmaking`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    statsControllerGetMatchmakingInfo = async (): Promise<Array<MatchmakingInfo>> => {
        const response = await this.statsControllerGetMatchmakingInfoRaw();
        return await response.value();
    }

    useStatsControllerGetMatchmakingInfo(config?: SWRConfiguration<Array<MatchmakingInfo>, Error>) {
        let valid = true

        const context = this.statsControllerGetMatchmakingInfoContext();
        return useSWR(context, valid ? () => this.statsControllerGetMatchmakingInfo() : null, config)
    }

    /**
     */
    private async statsControllerOnlineRaw(): Promise<runtime.ApiResponse<CurrentOnlineDto>> {
        this.statsControllerOnlineValidation();
        const context = this.statsControllerOnlineContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrentOnlineDtoFromJSON(jsonValue));
    }



    /**
     */
    private statsControllerOnlineValidation() {
    }

    /**
     */
    statsControllerOnlineContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/stats/online`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    statsControllerOnline = async (): Promise<CurrentOnlineDto> => {
        const response = await this.statsControllerOnlineRaw();
        return await response.value();
    }

    useStatsControllerOnline(config?: SWRConfiguration<CurrentOnlineDto, Error>) {
        let valid = true

        const context = this.statsControllerOnlineContext();
        return useSWR(context, valid ? () => this.statsControllerOnline() : null, config)
    }

}
