/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";
import useSWR from "swr";
import { SWRConfiguration } from "swr/_internal";

import {
  ProductDto,
  ProductDtoFromJSON,
  ProductDtoToJSON,
  StoreCategoryDto,
  StoreCategoryDtoFromJSON,
  StoreCategoryDtoToJSON,
  StoreItemHolderDto,
  StoreItemHolderDtoFromJSON,
  StoreItemHolderDtoToJSON,
  StorePageDto,
  StorePageDtoFromJSON,
  StorePageDtoToJSON,
  StoreStoreProductPurchaseDto,
  StoreStoreProductPurchaseDtoFromJSON,
  StoreStoreProductPurchaseDtoToJSON,
} from "../models";

export interface StoreControllerGetProductRequest {
  id: string;
}

export interface StoreControllerPurchaseProductRequest {
  id: string;
}

/**
 * 
 */
export class StoreApi extends runtime.BaseAPI {

    /**
     */
    private async storeControllerCategoriesRaw(): Promise<runtime.ApiResponse<Array<StoreCategoryDto>>> {
        this.storeControllerCategoriesValidation();
        const context = this.storeControllerCategoriesContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StoreCategoryDtoFromJSON));
    }



    /**
     */
    private storeControllerCategoriesValidation() {
    }

    /**
     */
    storeControllerCategoriesContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/store/category`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    storeControllerCategories = async (): Promise<Array<StoreCategoryDto>> => {
        const response = await this.storeControllerCategoriesRaw();
        return await response.value();
    }

    useStoreControllerCategories(config?: SWRConfiguration<Array<StoreCategoryDto>, Error>) {
        let valid = true

        const context = this.storeControllerCategoriesContext();
        return useSWR(context, valid ? () => this.storeControllerCategories() : null, config)
    }

    /**
     */
    private async storeControllerGetProductRaw(requestParameters: StoreControllerGetProductRequest): Promise<runtime.ApiResponse<ProductDto>> {
        this.storeControllerGetProductValidation(requestParameters);
        const context = this.storeControllerGetProductContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDtoFromJSON(jsonValue));
    }



    /**
     */
    private storeControllerGetProductValidation(requestParameters: StoreControllerGetProductRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling storeControllerGetProduct.");
        }
    }

    /**
     */
    storeControllerGetProductContext(requestParameters: StoreControllerGetProductRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/store/product/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    storeControllerGetProduct = async (id: string): Promise<ProductDto> => {
        const response = await this.storeControllerGetProductRaw({ id: id });
        return await response.value();
    }

    useStoreControllerGetProduct(id: string, config?: SWRConfiguration<ProductDto, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        const context = this.storeControllerGetProductContext({ id: id! });
        return useSWR(context, valid ? () => this.storeControllerGetProduct(id!) : null, config)
    }

    /**
     */
    private async storeControllerGetStorePageRaw(): Promise<runtime.ApiResponse<StorePageDto>> {
        this.storeControllerGetStorePageValidation();
        const context = this.storeControllerGetStorePageContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => StorePageDtoFromJSON(jsonValue));
    }



    /**
     */
    private storeControllerGetStorePageValidation() {
    }

    /**
     */
    storeControllerGetStorePageContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/store`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    storeControllerGetStorePage = async (): Promise<StorePageDto> => {
        const response = await this.storeControllerGetStorePageRaw();
        return await response.value();
    }

    useStoreControllerGetStorePage(config?: SWRConfiguration<StorePageDto, Error>) {
        let valid = true

        const context = this.storeControllerGetStorePageContext();
        return useSWR(context, valid ? () => this.storeControllerGetStorePage() : null, config)
    }

    /**
     */
    private async storeControllerOwnedItemsRaw(): Promise<runtime.ApiResponse<Array<StoreItemHolderDto>>> {
        this.storeControllerOwnedItemsValidation();
        const context = this.storeControllerOwnedItemsContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StoreItemHolderDtoFromJSON));
    }



    /**
     */
    private storeControllerOwnedItemsValidation() {
    }

    /**
     */
    storeControllerOwnedItemsContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/store/item`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    storeControllerOwnedItems = async (): Promise<Array<StoreItemHolderDto>> => {
        const response = await this.storeControllerOwnedItemsRaw();
        return await response.value();
    }

    useStoreControllerOwnedItems(config?: SWRConfiguration<Array<StoreItemHolderDto>, Error>) {
        let valid = true

        const context = this.storeControllerOwnedItemsContext();
        return useSWR(context, valid ? () => this.storeControllerOwnedItems() : null, config)
    }

    /**
     */
    private async storeControllerPurchaseProductRaw(requestParameters: StoreControllerPurchaseProductRequest): Promise<runtime.ApiResponse<StoreStoreProductPurchaseDto>> {
        this.storeControllerPurchaseProductValidation(requestParameters);
        const context = this.storeControllerPurchaseProductContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreStoreProductPurchaseDtoFromJSON(jsonValue));
    }



    /**
     */
    private storeControllerPurchaseProductValidation(requestParameters: StoreControllerPurchaseProductRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling storeControllerPurchaseProduct.");
        }
    }

    /**
     */
    storeControllerPurchaseProductContext(requestParameters: StoreControllerPurchaseProductRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/store/product/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    storeControllerPurchaseProduct = async (id: string): Promise<StoreStoreProductPurchaseDto> => {
        const response = await this.storeControllerPurchaseProductRaw({ id: id });
        return await response.value();
    }


}
