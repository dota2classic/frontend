/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";
import useSWR from "swr";
import { SWRConfiguration } from "swr/_internal";

import {
  CreatePaymentDto,
  CreatePaymentDtoFromJSON,
  CreatePaymentDtoToJSON,
  SubscriptionProductDto,
  SubscriptionProductDtoFromJSON,
  SubscriptionProductDtoToJSON,
} from "../models";

export interface UserPaymentsControllerCreatePaymentRequest {
  createPaymentDto: CreatePaymentDto;
}

/**
 * 
 */
export class UserPaymentApi extends runtime.BaseAPI {

    /**
     */
    private async userPaymentsControllerCreatePaymentRaw(requestParameters: UserPaymentsControllerCreatePaymentRequest): Promise<runtime.ApiResponse<string>> {
        this.userPaymentsControllerCreatePaymentValidation(requestParameters);
        const context = this.userPaymentsControllerCreatePaymentContext(requestParameters);
        const response = await this.request(context);

        return new runtime.TextApiResponse(response) as any;
    }



    /**
     */
    private userPaymentsControllerCreatePaymentValidation(requestParameters: UserPaymentsControllerCreatePaymentRequest) {
        if (requestParameters.createPaymentDto === null || requestParameters.createPaymentDto === undefined) {
            throw new runtime.RequiredError("createPaymentDto","Required parameter requestParameters.createPaymentDto was null or undefined when calling userPaymentsControllerCreatePayment.");
        }
    }

    /**
     */
    userPaymentsControllerCreatePaymentContext(requestParameters: UserPaymentsControllerCreatePaymentRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/user_payment`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: CreatePaymentDtoToJSON(requestParameters.createPaymentDto),
        };
    }

    /**
     */
    userPaymentsControllerCreatePayment = async (createPaymentDto: CreatePaymentDto): Promise<string> => {
        const response = await this.userPaymentsControllerCreatePaymentRaw({ createPaymentDto: createPaymentDto });
        return await response.value();
    }


    /**
     */
    private async userPaymentsControllerGetProductsRaw(): Promise<runtime.ApiResponse<Array<SubscriptionProductDto>>> {
        this.userPaymentsControllerGetProductsValidation();
        const context = this.userPaymentsControllerGetProductsContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubscriptionProductDtoFromJSON));
    }



    /**
     */
    private userPaymentsControllerGetProductsValidation() {
    }

    /**
     */
    userPaymentsControllerGetProductsContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/user_payment/products`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    userPaymentsControllerGetProducts = async (): Promise<Array<SubscriptionProductDto>> => {
        const response = await this.userPaymentsControllerGetProductsRaw();
        return await response.value();
    }

    useUserPaymentsControllerGetProducts(config?: SWRConfiguration<Array<SubscriptionProductDto>, Error>) {
        let valid = true

        const context = this.userPaymentsControllerGetProductsContext();
        return useSWR(context, valid ? () => this.userPaymentsControllerGetProducts() : null, config)
    }

}
