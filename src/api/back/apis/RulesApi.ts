/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";
import useSWR from "swr";
import { SWRConfiguration } from "swr/_internal";

import {
  CreateRuleDto,
  CreateRuleDtoFromJSON,
  CreateRuleDtoToJSON,
  RuleDeleteResultDto,
  RuleDeleteResultDtoFromJSON,
  RuleDeleteResultDtoToJSON,
  RuleDto,
  RuleDtoFromJSON,
  RuleDtoToJSON,
  UpdateRuleDto,
  UpdateRuleDtoFromJSON,
  UpdateRuleDtoToJSON,
  UpdateRuleIndicesDto,
  UpdateRuleIndicesDtoFromJSON,
  UpdateRuleIndicesDtoToJSON,
} from "../models";

export interface RuleControllerCreateRuleRequest {
  createRuleDto: CreateRuleDto;
}

export interface RuleControllerDeleteRuleRequest {
  id: number;
}

export interface RuleControllerGetRuleRequest {
  id: number;
}

export interface RuleControllerUpdateIndicesRequest {
  updateRuleIndicesDto: UpdateRuleIndicesDto;
}

export interface RuleControllerUpdateRuleRequest {
  id: number;
  updateRuleDto: UpdateRuleDto;
}

/**
 * 
 */
export class RulesApi extends runtime.BaseAPI {

    /**
     */
    private async ruleControllerCreateRuleRaw(requestParameters: RuleControllerCreateRuleRequest): Promise<runtime.ApiResponse<RuleDto>> {
        this.ruleControllerCreateRuleValidation(requestParameters);
        const context = this.ruleControllerCreateRuleContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleDtoFromJSON(jsonValue));
    }



    /**
     */
    private ruleControllerCreateRuleValidation(requestParameters: RuleControllerCreateRuleRequest) {
        if (requestParameters.createRuleDto === null || requestParameters.createRuleDto === undefined) {
            throw new runtime.RequiredError("createRuleDto","Required parameter requestParameters.createRuleDto was null or undefined when calling ruleControllerCreateRule.");
        }
    }

    /**
     */
    ruleControllerCreateRuleContext(requestParameters: RuleControllerCreateRuleRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        return {
            path: `/v1/rules`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: CreateRuleDtoToJSON(requestParameters.createRuleDto),
        };
    }

    /**
     */
    ruleControllerCreateRule = async (createRuleDto: CreateRuleDto): Promise<RuleDto> => {
        const response = await this.ruleControllerCreateRuleRaw({ createRuleDto: createRuleDto });
        return await response.value();
    }


    /**
     */
    private async ruleControllerDeleteRuleRaw(requestParameters: RuleControllerDeleteRuleRequest): Promise<runtime.ApiResponse<RuleDeleteResultDto>> {
        this.ruleControllerDeleteRuleValidation(requestParameters);
        const context = this.ruleControllerDeleteRuleContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleDeleteResultDtoFromJSON(jsonValue));
    }



    /**
     */
    private ruleControllerDeleteRuleValidation(requestParameters: RuleControllerDeleteRuleRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling ruleControllerDeleteRule.");
        }
    }

    /**
     */
    ruleControllerDeleteRuleContext(requestParameters: RuleControllerDeleteRuleRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/rules/rule/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "DELETE",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    ruleControllerDeleteRule = async (id: number): Promise<RuleDeleteResultDto> => {
        const response = await this.ruleControllerDeleteRuleRaw({ id: id });
        return await response.value();
    }

    useRuleControllerDeleteRule(id: number, config?: SWRConfiguration<RuleDeleteResultDto, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        const context = this.ruleControllerDeleteRuleContext({ id: id! });
        return useSWR(context, valid ? () => this.ruleControllerDeleteRule(id!) : null, config)
    }

    /**
     */
    private async ruleControllerGetAllRulesRaw(): Promise<runtime.ApiResponse<Array<RuleDto>>> {
        this.ruleControllerGetAllRulesValidation();
        const context = this.ruleControllerGetAllRulesContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RuleDtoFromJSON));
    }



    /**
     */
    private ruleControllerGetAllRulesValidation() {
    }

    /**
     */
    ruleControllerGetAllRulesContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/rules`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    ruleControllerGetAllRules = async (): Promise<Array<RuleDto>> => {
        const response = await this.ruleControllerGetAllRulesRaw();
        return await response.value();
    }

    useRuleControllerGetAllRules(config?: SWRConfiguration<Array<RuleDto>, Error>) {
        let valid = true

        const context = this.ruleControllerGetAllRulesContext();
        return useSWR(context, valid ? () => this.ruleControllerGetAllRules() : null, config)
    }

    /**
     */
    private async ruleControllerGetRuleRaw(requestParameters: RuleControllerGetRuleRequest): Promise<runtime.ApiResponse<RuleDto>> {
        this.ruleControllerGetRuleValidation(requestParameters);
        const context = this.ruleControllerGetRuleContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleDtoFromJSON(jsonValue));
    }



    /**
     */
    private ruleControllerGetRuleValidation(requestParameters: RuleControllerGetRuleRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling ruleControllerGetRule.");
        }
    }

    /**
     */
    ruleControllerGetRuleContext(requestParameters: RuleControllerGetRuleRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/rules/rule/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    ruleControllerGetRule = async (id: number): Promise<RuleDto> => {
        const response = await this.ruleControllerGetRuleRaw({ id: id });
        return await response.value();
    }

    useRuleControllerGetRule(id: number, config?: SWRConfiguration<RuleDto, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        const context = this.ruleControllerGetRuleContext({ id: id! });
        return useSWR(context, valid ? () => this.ruleControllerGetRule(id!) : null, config)
    }

    /**
     */
    private async ruleControllerUpdateIndicesRaw(requestParameters: RuleControllerUpdateIndicesRequest): Promise<runtime.ApiResponse<Array<RuleDto>>> {
        this.ruleControllerUpdateIndicesValidation(requestParameters);
        const context = this.ruleControllerUpdateIndicesContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RuleDtoFromJSON));
    }



    /**
     */
    private ruleControllerUpdateIndicesValidation(requestParameters: RuleControllerUpdateIndicesRequest) {
        if (requestParameters.updateRuleIndicesDto === null || requestParameters.updateRuleIndicesDto === undefined) {
            throw new runtime.RequiredError("updateRuleIndicesDto","Required parameter requestParameters.updateRuleIndicesDto was null or undefined when calling ruleControllerUpdateIndices.");
        }
    }

    /**
     */
    ruleControllerUpdateIndicesContext(requestParameters: RuleControllerUpdateIndicesRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        return {
            path: `/v1/rules/indices`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRuleIndicesDtoToJSON(requestParameters.updateRuleIndicesDto),
        };
    }

    /**
     */
    ruleControllerUpdateIndices = async (updateRuleIndicesDto: UpdateRuleIndicesDto): Promise<Array<RuleDto>> => {
        const response = await this.ruleControllerUpdateIndicesRaw({ updateRuleIndicesDto: updateRuleIndicesDto });
        return await response.value();
    }


    /**
     */
    private async ruleControllerUpdateRuleRaw(requestParameters: RuleControllerUpdateRuleRequest): Promise<runtime.ApiResponse<RuleDto>> {
        this.ruleControllerUpdateRuleValidation(requestParameters);
        const context = this.ruleControllerUpdateRuleContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleDtoFromJSON(jsonValue));
    }



    /**
     */
    private ruleControllerUpdateRuleValidation(requestParameters: RuleControllerUpdateRuleRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling ruleControllerUpdateRule.");
        }
        if (requestParameters.updateRuleDto === null || requestParameters.updateRuleDto === undefined) {
            throw new runtime.RequiredError("updateRuleDto","Required parameter requestParameters.updateRuleDto was null or undefined when calling ruleControllerUpdateRule.");
        }
    }

    /**
     */
    ruleControllerUpdateRuleContext(requestParameters: RuleControllerUpdateRuleRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        return {
            path: `/v1/rules/rule/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "PATCH",
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRuleDtoToJSON(requestParameters.updateRuleDto),
        };
    }

    /**
     */
    ruleControllerUpdateRule = async (id: number, updateRuleDto: UpdateRuleDto): Promise<RuleDto> => {
        const response = await this.ruleControllerUpdateRuleRaw({ id: id, updateRuleDto: updateRuleDto });
        return await response.value();
    }


}
