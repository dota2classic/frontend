/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR from "swr";
import { SWRConfiguration } from "swr/_internal";

import {
    MatchDto,
    MatchDtoFromJSON,
    MatchDtoToJSON,
    MatchPageDto,
    MatchPageDtoFromJSON,
    MatchPageDtoToJSON,
} from '../models';

export interface MatchControllerHeroMatchesRequest {
    page: number;
    hero: string;
    perPage?: number;
}

export interface MatchControllerMatchRequest {
    id: number;
}

export interface MatchControllerMatchesRequest {
    page: number;
    perPage?: number;
    mode?: number;
}

export interface MatchControllerPlayerMatchesRequest {
    id: string;
    page: number;
    perPage?: number;
    mode?: number;
    hero?: string;
}

/**
 * 
 */
export class MatchApi extends runtime.BaseAPI {

    /**
     */
    private async matchControllerHeroMatchesRaw(requestParameters: MatchControllerHeroMatchesRequest): Promise<runtime.ApiResponse<MatchPageDto>> {
        this.matchControllerHeroMatchesValidation(requestParameters);
        const context = this.matchControllerHeroMatchesContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => MatchPageDtoFromJSON(jsonValue));
    }



    /**
     */
    private matchControllerHeroMatchesValidation(requestParameters: MatchControllerHeroMatchesRequest) {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling matchControllerHeroMatches.');
        }
        if (requestParameters.hero === null || requestParameters.hero === undefined) {
            throw new runtime.RequiredError('hero','Required parameter requestParameters.hero was null or undefined when calling matchControllerHeroMatches.');
        }
    }

    /**
     */
    matchControllerHeroMatchesContext(requestParameters: MatchControllerHeroMatchesRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        if (requestParameters.hero !== undefined) {
            queryParameters['hero'] = requestParameters.hero;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/match/by_hero`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    matchControllerHeroMatches = async (page: number, hero: string, perPage?: number): Promise<MatchPageDto> => {
        const response = await this.matchControllerHeroMatchesRaw({ page: page, hero: hero, perPage: perPage });
        return await response.value();
    }

    useMatchControllerHeroMatches(page: number, hero: string, perPage?: number, config?: SWRConfiguration<MatchPageDto, Error>) {
        let valid = true

        if (page === null || page === undefined || Number.isNaN(page)) {
            valid = false
        }

        if (hero === null || hero === undefined || Number.isNaN(hero)) {
            valid = false
        }

        const context = this.matchControllerHeroMatchesContext({ page: page!, hero: hero!, perPage: perPage! });
        return useSWR(context, valid ? () => this.matchControllerHeroMatches(page!, hero!, perPage!) : null, config)
    }

    /**
     */
    private async matchControllerMatchRaw(requestParameters: MatchControllerMatchRequest): Promise<runtime.ApiResponse<MatchDto>> {
        this.matchControllerMatchValidation(requestParameters);
        const context = this.matchControllerMatchContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => MatchDtoFromJSON(jsonValue));
    }



    /**
     */
    private matchControllerMatchValidation(requestParameters: MatchControllerMatchRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling matchControllerMatch.');
        }
    }

    /**
     */
    matchControllerMatchContext(requestParameters: MatchControllerMatchRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/match/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    matchControllerMatch = async (id: number): Promise<MatchDto> => {
        const response = await this.matchControllerMatchRaw({ id: id });
        return await response.value();
    }

    useMatchControllerMatch(id: number, config?: SWRConfiguration<MatchDto, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        const context = this.matchControllerMatchContext({ id: id! });
        return useSWR(context, valid ? () => this.matchControllerMatch(id!) : null, config)
    }

    /**
     */
    private async matchControllerMatchesRaw(requestParameters: MatchControllerMatchesRequest): Promise<runtime.ApiResponse<MatchPageDto>> {
        this.matchControllerMatchesValidation(requestParameters);
        const context = this.matchControllerMatchesContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => MatchPageDtoFromJSON(jsonValue));
    }



    /**
     */
    private matchControllerMatchesValidation(requestParameters: MatchControllerMatchesRequest) {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling matchControllerMatches.');
        }
    }

    /**
     */
    matchControllerMatchesContext(requestParameters: MatchControllerMatchesRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/match/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    matchControllerMatches = async (page: number, perPage?: number, mode?: number): Promise<MatchPageDto> => {
        const response = await this.matchControllerMatchesRaw({ page: page, perPage: perPage, mode: mode });
        return await response.value();
    }

    useMatchControllerMatches(page: number, perPage?: number, mode?: number, config?: SWRConfiguration<MatchPageDto, Error>) {
        let valid = true

        if (page === null || page === undefined || Number.isNaN(page)) {
            valid = false
        }

        const context = this.matchControllerMatchesContext({ page: page!, perPage: perPage!, mode: mode! });
        return useSWR(context, valid ? () => this.matchControllerMatches(page!, perPage!, mode!) : null, config)
    }

    /**
     */
    private async matchControllerPlayerMatchesRaw(requestParameters: MatchControllerPlayerMatchesRequest): Promise<runtime.ApiResponse<MatchPageDto>> {
        this.matchControllerPlayerMatchesValidation(requestParameters);
        const context = this.matchControllerPlayerMatchesContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => MatchPageDtoFromJSON(jsonValue));
    }



    /**
     */
    private matchControllerPlayerMatchesValidation(requestParameters: MatchControllerPlayerMatchesRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling matchControllerPlayerMatches.');
        }
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling matchControllerPlayerMatches.');
        }
    }

    /**
     */
    matchControllerPlayerMatchesContext(requestParameters: MatchControllerPlayerMatchesRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        if (requestParameters.hero !== undefined) {
            queryParameters['hero'] = requestParameters.hero;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/match/player/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    matchControllerPlayerMatches = async (id: string, page: number, perPage?: number, mode?: number, hero?: string): Promise<MatchPageDto> => {
        const response = await this.matchControllerPlayerMatchesRaw({ id: id, page: page, perPage: perPage, mode: mode, hero: hero });
        return await response.value();
    }

    useMatchControllerPlayerMatches(id: string, page: number, perPage?: number, mode?: number, hero?: string, config?: SWRConfiguration<MatchPageDto, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        if (page === null || page === undefined || Number.isNaN(page)) {
            valid = false
        }

        const context = this.matchControllerPlayerMatchesContext({ id: id!, page: page!, perPage: perPage!, mode: mode!, hero: hero! });
        return useSWR(context, valid ? () => this.matchControllerPlayerMatches(id!, page!, perPage!, mode!, hero!) : null, config)
    }

}
