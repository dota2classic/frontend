/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";
import useSWR from "swr";
import { SWRConfiguration } from "swr/_internal";

import {
  DroppedItemDto,
  DroppedItemDtoFromJSON,
  DroppedItemDtoToJSON,
  TradeUserDto,
  TradeUserDtoFromJSON,
  TradeUserDtoToJSON,
  UpdateTradeLinkDto,
  UpdateTradeLinkDtoFromJSON,
  UpdateTradeLinkDtoToJSON,
} from "../models";

export interface ItemDropControllerDiscardDropRequest {
  id: string;
}

export interface ItemDropControllerUpdateTradeLinkRequest {
  updateTradeLinkDto: UpdateTradeLinkDto;
}

/**
 * 
 */
export class DropsApi extends runtime.BaseAPI {

    /**
     */
    private async itemDropControllerClaimDropsRaw(): Promise<runtime.ApiResponse<string>> {
        this.itemDropControllerClaimDropsValidation();
        const context = this.itemDropControllerClaimDropsContext();
        const response = await this.request(context);

        return new runtime.TextApiResponse(response) as any;
    }



    /**
     */
    private itemDropControllerClaimDropsValidation() {
    }

    /**
     */
    itemDropControllerClaimDropsContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/drops/item`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    itemDropControllerClaimDrops = async (): Promise<string> => {
        const response = await this.itemDropControllerClaimDropsRaw();
        return await response.value();
    }


    /**
     */
    private async itemDropControllerDiscardDropRaw(requestParameters: ItemDropControllerDiscardDropRequest): Promise<runtime.ApiResponse<void>> {
        this.itemDropControllerDiscardDropValidation(requestParameters);
        const context = this.itemDropControllerDiscardDropContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }



    /**
     */
    private itemDropControllerDiscardDropValidation(requestParameters: ItemDropControllerDiscardDropRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling itemDropControllerDiscardDrop.");
        }
    }

    /**
     */
    itemDropControllerDiscardDropContext(requestParameters: ItemDropControllerDiscardDropRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/drops/item/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "DELETE",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    itemDropControllerDiscardDrop = async (id: string): Promise<void> => {
        await this.itemDropControllerDiscardDropRaw({ id: id });
    }

    useItemDropControllerDiscardDrop(id: string, config?: SWRConfiguration<void, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        const context = this.itemDropControllerDiscardDropContext({ id: id! });
        return useSWR(context, valid ? () => this.itemDropControllerDiscardDrop(id!) : null, config)
    }

    /**
     */
    private async itemDropControllerGetMyDropsRaw(): Promise<runtime.ApiResponse<Array<DroppedItemDto>>> {
        this.itemDropControllerGetMyDropsValidation();
        const context = this.itemDropControllerGetMyDropsContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DroppedItemDtoFromJSON));
    }



    /**
     */
    private itemDropControllerGetMyDropsValidation() {
    }

    /**
     */
    itemDropControllerGetMyDropsContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/drops/item`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    itemDropControllerGetMyDrops = async (): Promise<Array<DroppedItemDto>> => {
        const response = await this.itemDropControllerGetMyDropsRaw();
        return await response.value();
    }

    useItemDropControllerGetMyDrops(config?: SWRConfiguration<Array<DroppedItemDto>, Error>) {
        let valid = true

        const context = this.itemDropControllerGetMyDropsContext();
        return useSWR(context, valid ? () => this.itemDropControllerGetMyDrops() : null, config)
    }

    /**
     */
    private async itemDropControllerGetUserRaw(): Promise<runtime.ApiResponse<TradeUserDto>> {
        this.itemDropControllerGetUserValidation();
        const context = this.itemDropControllerGetUserContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => TradeUserDtoFromJSON(jsonValue));
    }



    /**
     */
    private itemDropControllerGetUserValidation() {
    }

    /**
     */
    itemDropControllerGetUserContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/drops/user`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    itemDropControllerGetUser = async (): Promise<TradeUserDto> => {
        const response = await this.itemDropControllerGetUserRaw();
        return await response.value();
    }

    useItemDropControllerGetUser(config?: SWRConfiguration<TradeUserDto, Error>) {
        let valid = true

        const context = this.itemDropControllerGetUserContext();
        return useSWR(context, valid ? () => this.itemDropControllerGetUser() : null, config)
    }

    /**
     */
    private async itemDropControllerUpdateTradeLinkRaw(requestParameters: ItemDropControllerUpdateTradeLinkRequest): Promise<runtime.ApiResponse<TradeUserDto>> {
        this.itemDropControllerUpdateTradeLinkValidation(requestParameters);
        const context = this.itemDropControllerUpdateTradeLinkContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => TradeUserDtoFromJSON(jsonValue));
    }



    /**
     */
    private itemDropControllerUpdateTradeLinkValidation(requestParameters: ItemDropControllerUpdateTradeLinkRequest) {
        if (requestParameters.updateTradeLinkDto === null || requestParameters.updateTradeLinkDto === undefined) {
            throw new runtime.RequiredError("updateTradeLinkDto","Required parameter requestParameters.updateTradeLinkDto was null or undefined when calling itemDropControllerUpdateTradeLink.");
        }
    }

    /**
     */
    itemDropControllerUpdateTradeLinkContext(requestParameters: ItemDropControllerUpdateTradeLinkRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/drops/user`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTradeLinkDtoToJSON(requestParameters.updateTradeLinkDto),
        };
    }

    /**
     */
    itemDropControllerUpdateTradeLink = async (updateTradeLinkDto: UpdateTradeLinkDto): Promise<TradeUserDto> => {
        const response = await this.itemDropControllerUpdateTradeLinkRaw({ updateTradeLinkDto: updateTradeLinkDto });
        return await response.value();
    }


}
