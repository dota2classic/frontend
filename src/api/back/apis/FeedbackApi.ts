/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";
import useSWR from "swr";
import { SWRConfiguration } from "swr/_internal";

import {
  FeedbackDto,
  FeedbackDtoFromJSON,
  FeedbackDtoToJSON,
  SubmitFeedbackDto,
  SubmitFeedbackDtoFromJSON,
  SubmitFeedbackDtoToJSON,
} from "../models";

export interface FeedbackControllerGetFeedbackRequest {
  id: number;
}

export interface FeedbackControllerSubmitFeedbackResultRequest {
  id: number;
  submitFeedbackDto: SubmitFeedbackDto;
}

/**
 * 
 */
export class FeedbackApi extends runtime.BaseAPI {

    /**
     */
    private async feedbackControllerGetFeedbackRaw(requestParameters: FeedbackControllerGetFeedbackRequest): Promise<runtime.ApiResponse<FeedbackDto>> {
        this.feedbackControllerGetFeedbackValidation(requestParameters);
        const context = this.feedbackControllerGetFeedbackContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedbackDtoFromJSON(jsonValue));
    }



    /**
     */
    private feedbackControllerGetFeedbackValidation(requestParameters: FeedbackControllerGetFeedbackRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling feedbackControllerGetFeedback.");
        }
    }

    /**
     */
    feedbackControllerGetFeedbackContext(requestParameters: FeedbackControllerGetFeedbackRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/feedback/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    feedbackControllerGetFeedback = async (id: number): Promise<FeedbackDto> => {
        const response = await this.feedbackControllerGetFeedbackRaw({ id: id });
        return await response.value();
    }

    useFeedbackControllerGetFeedback(id: number, config?: SWRConfiguration<FeedbackDto, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        const context = this.feedbackControllerGetFeedbackContext({ id: id! });
        return useSWR(context, valid ? () => this.feedbackControllerGetFeedback(id!) : null, config)
    }

    /**
     */
    private async feedbackControllerSubmitFeedbackResultRaw(requestParameters: FeedbackControllerSubmitFeedbackResultRequest): Promise<runtime.ApiResponse<FeedbackDto>> {
        this.feedbackControllerSubmitFeedbackResultValidation(requestParameters);
        const context = this.feedbackControllerSubmitFeedbackResultContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedbackDtoFromJSON(jsonValue));
    }



    /**
     */
    private feedbackControllerSubmitFeedbackResultValidation(requestParameters: FeedbackControllerSubmitFeedbackResultRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling feedbackControllerSubmitFeedbackResult.");
        }
        if (requestParameters.submitFeedbackDto === null || requestParameters.submitFeedbackDto === undefined) {
            throw new runtime.RequiredError("submitFeedbackDto","Required parameter requestParameters.submitFeedbackDto was null or undefined when calling feedbackControllerSubmitFeedbackResult.");
        }
    }

    /**
     */
    feedbackControllerSubmitFeedbackResultContext(requestParameters: FeedbackControllerSubmitFeedbackResultRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/feedback/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: SubmitFeedbackDtoToJSON(requestParameters.submitFeedbackDto),
        };
    }

    /**
     */
    feedbackControllerSubmitFeedbackResult = async (id: number, submitFeedbackDto: SubmitFeedbackDto): Promise<FeedbackDto> => {
        const response = await this.feedbackControllerSubmitFeedbackResultRaw({ id: id, submitFeedbackDto: submitFeedbackDto });
        return await response.value();
    }


}
