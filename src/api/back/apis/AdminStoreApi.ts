/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";
import useSWR from "swr";
import { SWRConfiguration } from "swr/_internal";

import {
  ProductDto,
  ProductDtoFromJSON,
  ProductDtoToJSON,
  StoreCreateProductDto,
  StoreCreateProductDtoFromJSON,
  StoreCreateProductDtoToJSON,
  StoreUpdateProductDto,
  StoreUpdateProductDtoFromJSON,
  StoreUpdateProductDtoToJSON,
} from "../models";

export interface AdminStoreControllerCreateProductRequest {
  storeCreateProductDto: StoreCreateProductDto;
}

export interface AdminStoreControllerDeleteProductRequest {
  id: string;
}

export interface AdminStoreControllerGetProductRequest {
  id: string;
}

export interface AdminStoreControllerUpdateProductRequest {
  id: string;
  storeUpdateProductDto: StoreUpdateProductDto;
}

/**
 * 
 */
export class AdminStoreApi extends runtime.BaseAPI {

    /**
     */
    private async adminStoreControllerCreateProductRaw(requestParameters: AdminStoreControllerCreateProductRequest): Promise<runtime.ApiResponse<ProductDto>> {
        this.adminStoreControllerCreateProductValidation(requestParameters);
        const context = this.adminStoreControllerCreateProductContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDtoFromJSON(jsonValue));
    }



    /**
     */
    private adminStoreControllerCreateProductValidation(requestParameters: AdminStoreControllerCreateProductRequest) {
        if (requestParameters.storeCreateProductDto === null || requestParameters.storeCreateProductDto === undefined) {
            throw new runtime.RequiredError("storeCreateProductDto","Required parameter requestParameters.storeCreateProductDto was null or undefined when calling adminStoreControllerCreateProduct.");
        }
    }

    /**
     */
    adminStoreControllerCreateProductContext(requestParameters: AdminStoreControllerCreateProductRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        return {
            path: `/v1/admin/store/product`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: StoreCreateProductDtoToJSON(requestParameters.storeCreateProductDto),
        };
    }

    /**
     */
    adminStoreControllerCreateProduct = async (storeCreateProductDto: StoreCreateProductDto): Promise<ProductDto> => {
        const response = await this.adminStoreControllerCreateProductRaw({ storeCreateProductDto: storeCreateProductDto });
        return await response.value();
    }


    /**
     */
    private async adminStoreControllerDeleteProductRaw(requestParameters: AdminStoreControllerDeleteProductRequest): Promise<runtime.ApiResponse<void>> {
        this.adminStoreControllerDeleteProductValidation(requestParameters);
        const context = this.adminStoreControllerDeleteProductContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }



    /**
     */
    private adminStoreControllerDeleteProductValidation(requestParameters: AdminStoreControllerDeleteProductRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling adminStoreControllerDeleteProduct.");
        }
    }

    /**
     */
    adminStoreControllerDeleteProductContext(requestParameters: AdminStoreControllerDeleteProductRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/admin/store/product/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "DELETE",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    adminStoreControllerDeleteProduct = async (id: string): Promise<void> => {
        await this.adminStoreControllerDeleteProductRaw({ id: id });
    }

    useAdminStoreControllerDeleteProduct(id: string, config?: SWRConfiguration<void, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        const context = this.adminStoreControllerDeleteProductContext({ id: id! });
        return useSWR(context, valid ? () => this.adminStoreControllerDeleteProduct(id!) : null, config)
    }

    /**
     */
    private async adminStoreControllerGetProductRaw(requestParameters: AdminStoreControllerGetProductRequest): Promise<runtime.ApiResponse<ProductDto>> {
        this.adminStoreControllerGetProductValidation(requestParameters);
        const context = this.adminStoreControllerGetProductContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDtoFromJSON(jsonValue));
    }



    /**
     */
    private adminStoreControllerGetProductValidation(requestParameters: AdminStoreControllerGetProductRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling adminStoreControllerGetProduct.");
        }
    }

    /**
     */
    adminStoreControllerGetProductContext(requestParameters: AdminStoreControllerGetProductRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/admin/store/product/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    adminStoreControllerGetProduct = async (id: string): Promise<ProductDto> => {
        const response = await this.adminStoreControllerGetProductRaw({ id: id });
        return await response.value();
    }

    useAdminStoreControllerGetProduct(id: string, config?: SWRConfiguration<ProductDto, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        const context = this.adminStoreControllerGetProductContext({ id: id! });
        return useSWR(context, valid ? () => this.adminStoreControllerGetProduct(id!) : null, config)
    }

    /**
     */
    private async adminStoreControllerUpdateProductRaw(requestParameters: AdminStoreControllerUpdateProductRequest): Promise<runtime.ApiResponse<ProductDto>> {
        this.adminStoreControllerUpdateProductValidation(requestParameters);
        const context = this.adminStoreControllerUpdateProductContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDtoFromJSON(jsonValue));
    }



    /**
     */
    private adminStoreControllerUpdateProductValidation(requestParameters: AdminStoreControllerUpdateProductRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling adminStoreControllerUpdateProduct.");
        }
        if (requestParameters.storeUpdateProductDto === null || requestParameters.storeUpdateProductDto === undefined) {
            throw new runtime.RequiredError("storeUpdateProductDto","Required parameter requestParameters.storeUpdateProductDto was null or undefined when calling adminStoreControllerUpdateProduct.");
        }
    }

    /**
     */
    adminStoreControllerUpdateProductContext(requestParameters: AdminStoreControllerUpdateProductRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        return {
            path: `/v1/admin/store/product/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "PATCH",
            headers: headerParameters,
            query: queryParameters,
            body: StoreUpdateProductDtoToJSON(requestParameters.storeUpdateProductDto),
        };
    }

    /**
     */
    adminStoreControllerUpdateProduct = async (id: string, storeUpdateProductDto: StoreUpdateProductDto): Promise<ProductDto> => {
        const response = await this.adminStoreControllerUpdateProductRaw({ id: id, storeUpdateProductDto: storeUpdateProductDto });
        return await response.value();
    }


}
