/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";
import useSWR from "swr";
import { SWRConfiguration } from "swr/_internal";

import {
  PlayerRecordsResponse,
  PlayerRecordsResponseFromJSON,
  PlayerRecordsResponseToJSON,
} from "../models";

export interface RecordControllerPlayerRecordsRequest {
  steamId: string;
}

/**
 * 
 */
export class RecordApi extends runtime.BaseAPI {

    /**
     */
    private async recordControllerPlayerRecordsRaw(requestParameters: RecordControllerPlayerRecordsRequest): Promise<runtime.ApiResponse<PlayerRecordsResponse>> {
        this.recordControllerPlayerRecordsValidation(requestParameters);
        const context = this.recordControllerPlayerRecordsContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerRecordsResponseFromJSON(jsonValue));
    }



    /**
     */
    private recordControllerPlayerRecordsValidation(requestParameters: RecordControllerPlayerRecordsRequest) {
        if (requestParameters.steamId === null || requestParameters.steamId === undefined) {
            throw new runtime.RequiredError("steamId","Required parameter requestParameters.steamId was null or undefined when calling recordControllerPlayerRecords.");
        }
    }

    /**
     */
    recordControllerPlayerRecordsContext(requestParameters: RecordControllerPlayerRecordsRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/record/{steam_id}`.replace(`{${"steam_id"}}`, encodeURIComponent(String(requestParameters.steamId))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    recordControllerPlayerRecords = async (steamId: string): Promise<PlayerRecordsResponse> => {
        const response = await this.recordControllerPlayerRecordsRaw({ steamId: steamId });
        return await response.value();
    }

    useRecordControllerPlayerRecords(steamId: string, config?: SWRConfiguration<PlayerRecordsResponse, Error>) {
        let valid = true

        if (steamId === null || steamId === undefined || Number.isNaN(steamId)) {
            valid = false
        }

        const context = this.recordControllerPlayerRecordsContext({ steamId: steamId! });
        return useSWR(context, valid ? () => this.recordControllerPlayerRecords(steamId!) : null, config)
    }

    /**
     */
    private async recordControllerRecordsRaw(): Promise<runtime.ApiResponse<PlayerRecordsResponse>> {
        this.recordControllerRecordsValidation();
        const context = this.recordControllerRecordsContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerRecordsResponseFromJSON(jsonValue));
    }



    /**
     */
    private recordControllerRecordsValidation() {
    }

    /**
     */
    recordControllerRecordsContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/record`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    recordControllerRecords = async (): Promise<PlayerRecordsResponse> => {
        const response = await this.recordControllerRecordsRaw();
        return await response.value();
    }

    useRecordControllerRecords(config?: SWRConfiguration<PlayerRecordsResponse, Error>) {
        let valid = true

        const context = this.recordControllerRecordsContext();
        return useSWR(context, valid ? () => this.recordControllerRecords() : null, config)
    }

}
