/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";
import useSWR from "swr";
import { SWRConfiguration } from "swr/_internal";

import {
  SubscriptionDto,
  SubscriptionDtoFromJSON,
  SubscriptionDtoToJSON,
} from "../models";

export interface NotificationControllerSubscribeRequest {
  subscriptionDto: SubscriptionDto;
}

/**
 *
 */
export class NotificationApi extends runtime.BaseAPI {

    /**
     */
    notificationControllerSubscribeContext(requestParameters: NotificationControllerSubscribeRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        return {
            path: `/v1/notification/subscribe`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionDtoToJSON(requestParameters.subscriptionDto),
        };
    }

    /**
     */
    notificationControllerSubscribe = async (subscriptionDto: SubscriptionDto): Promise<number> => {
        const response = await this.notificationControllerSubscribeRaw({ subscriptionDto: subscriptionDto });
        return await response.value();
    }

    /**
     */
    notificationControllerTestContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/notification/test`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    notificationControllerTest = async (): Promise<string> => {
        const response = await this.notificationControllerTestRaw();
        return await response.value();
    }

    useNotificationControllerTest(config?: SWRConfiguration<string, Error>) {
        let valid = true

        const context = this.notificationControllerTestContext();
        return useSWR(context, valid ? () => this.notificationControllerTest() : null, config)
    }

    /**
     */
    private async notificationControllerSubscribeRaw(requestParameters: NotificationControllerSubscribeRequest): Promise<runtime.ApiResponse<number>> {
        this.notificationControllerSubscribeValidation(requestParameters);
        const context = this.notificationControllerSubscribeContext(requestParameters);
        const response = await this.request(context);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    private notificationControllerSubscribeValidation(requestParameters: NotificationControllerSubscribeRequest) {
        if (requestParameters.subscriptionDto === null || requestParameters.subscriptionDto === undefined) {
            throw new runtime.RequiredError("subscriptionDto","Required parameter requestParameters.subscriptionDto was null or undefined when calling notificationControllerSubscribe.");
        }
    }

    /**
     */
    private async notificationControllerTestRaw(): Promise<runtime.ApiResponse<string>> {
        this.notificationControllerTestValidation();
        const context = this.notificationControllerTestContext();
        const response = await this.request(context);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    private notificationControllerTestValidation() {
    }

}
