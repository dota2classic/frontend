/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";
import useSWR from "swr";
import { SWRConfiguration } from "swr/_internal";

import {
  NotificationDto,
  NotificationDtoFromJSON,
  NotificationDtoToJSON,
  SubscriptionDto,
  SubscriptionDtoFromJSON,
  SubscriptionDtoToJSON,
  TagPlayerForQueue,
  TagPlayerForQueueFromJSON,
  TagPlayerForQueueToJSON,
} from "../models";

export interface NotificationControllerAcknowledgeRequest {
  id: string;
}

export interface NotificationControllerNotifyAboutQueueRequest {
  tagPlayerForQueue: TagPlayerForQueue;
}

export interface NotificationControllerSubscribeRequest {
  subscriptionDto: SubscriptionDto;
}

/**
 * 
 */
export class NotificationApi extends runtime.BaseAPI {

    /**
     */
    private async notificationControllerAcknowledgeRaw(requestParameters: NotificationControllerAcknowledgeRequest): Promise<runtime.ApiResponse<NotificationDto>> {
        this.notificationControllerAcknowledgeValidation(requestParameters);
        const context = this.notificationControllerAcknowledgeContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationDtoFromJSON(jsonValue));
    }



    /**
     */
    private notificationControllerAcknowledgeValidation(requestParameters: NotificationControllerAcknowledgeRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling notificationControllerAcknowledge.");
        }
    }

    /**
     */
    notificationControllerAcknowledgeContext(requestParameters: NotificationControllerAcknowledgeRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/notification/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "PATCH",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    notificationControllerAcknowledge = async (id: string): Promise<NotificationDto> => {
        const response = await this.notificationControllerAcknowledgeRaw({ id: id });
        return await response.value();
    }


    /**
     */
    private async notificationControllerGetNotificationsRaw(): Promise<runtime.ApiResponse<Array<NotificationDto>>> {
        this.notificationControllerGetNotificationsValidation();
        const context = this.notificationControllerGetNotificationsContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NotificationDtoFromJSON));
    }



    /**
     */
    private notificationControllerGetNotificationsValidation() {
    }

    /**
     */
    notificationControllerGetNotificationsContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/notification/all`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    notificationControllerGetNotifications = async (): Promise<Array<NotificationDto>> => {
        const response = await this.notificationControllerGetNotificationsRaw();
        return await response.value();
    }

    useNotificationControllerGetNotifications(config?: SWRConfiguration<Array<NotificationDto>, Error>) {
        let valid = true

        const context = this.notificationControllerGetNotificationsContext();
        return useSWR(context, valid ? () => this.notificationControllerGetNotifications() : null, config)
    }

    /**
     */
    private async notificationControllerNotifyAboutQueueRaw(requestParameters: NotificationControllerNotifyAboutQueueRequest): Promise<runtime.ApiResponse<void>> {
        this.notificationControllerNotifyAboutQueueValidation(requestParameters);
        const context = this.notificationControllerNotifyAboutQueueContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }



    /**
     */
    private notificationControllerNotifyAboutQueueValidation(requestParameters: NotificationControllerNotifyAboutQueueRequest) {
        if (requestParameters.tagPlayerForQueue === null || requestParameters.tagPlayerForQueue === undefined) {
            throw new runtime.RequiredError("tagPlayerForQueue","Required parameter requestParameters.tagPlayerForQueue was null or undefined when calling notificationControllerNotifyAboutQueue.");
        }
    }

    /**
     */
    notificationControllerNotifyAboutQueueContext(requestParameters: NotificationControllerNotifyAboutQueueRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/notification/suggest_queue`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: TagPlayerForQueueToJSON(requestParameters.tagPlayerForQueue),
        };
    }

    /**
     */
    notificationControllerNotifyAboutQueue = async (tagPlayerForQueue: TagPlayerForQueue): Promise<void> => {
        await this.notificationControllerNotifyAboutQueueRaw({ tagPlayerForQueue: tagPlayerForQueue });
    }


    /**
     */
    private async notificationControllerSubscribeRaw(requestParameters: NotificationControllerSubscribeRequest): Promise<runtime.ApiResponse<number>> {
        this.notificationControllerSubscribeValidation(requestParameters);
        const context = this.notificationControllerSubscribeContext(requestParameters);
        const response = await this.request(context);

        return new runtime.TextApiResponse(response) as any;
    }



    /**
     */
    private notificationControllerSubscribeValidation(requestParameters: NotificationControllerSubscribeRequest) {
        if (requestParameters.subscriptionDto === null || requestParameters.subscriptionDto === undefined) {
            throw new runtime.RequiredError("subscriptionDto","Required parameter requestParameters.subscriptionDto was null or undefined when calling notificationControllerSubscribe.");
        }
    }

    /**
     */
    notificationControllerSubscribeContext(requestParameters: NotificationControllerSubscribeRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/notification/subscribe`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionDtoToJSON(requestParameters.subscriptionDto),
        };
    }

    /**
     */
    notificationControllerSubscribe = async (subscriptionDto: SubscriptionDto): Promise<number> => {
        const response = await this.notificationControllerSubscribeRaw({ subscriptionDto: subscriptionDto });
        return await response.value();
    }


    /**
     */
    private async notificationControllerUnsubscribeRaw(): Promise<runtime.ApiResponse<number>> {
        this.notificationControllerUnsubscribeValidation();
        const context = this.notificationControllerUnsubscribeContext();
        const response = await this.request(context);

        return new runtime.TextApiResponse(response) as any;
    }



    /**
     */
    private notificationControllerUnsubscribeValidation() {
    }

    /**
     */
    notificationControllerUnsubscribeContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/notification/subscribe`,
            method: "DELETE",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    notificationControllerUnsubscribe = async (): Promise<number> => {
        const response = await this.notificationControllerUnsubscribeRaw();
        return await response.value();
    }

    useNotificationControllerUnsubscribe(config?: SWRConfiguration<number, Error>) {
        let valid = true

        const context = this.notificationControllerUnsubscribeContext();
        return useSWR(context, valid ? () => this.notificationControllerUnsubscribe() : null, config)
    }

}
