/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";
import useSWR from "swr";
import { SWRConfiguration } from "swr/_internal";

import {
  BlogPageDto,
  BlogPageDtoFromJSON,
  BlogPageDtoToJSON,
  BlogpostDto,
  BlogpostDtoFromJSON,
  BlogpostDtoToJSON,
  UpdateBlogpostDraftDto,
  UpdateBlogpostDraftDtoFromJSON,
  UpdateBlogpostDraftDtoToJSON,
} from "../models";

export interface BlogpostControllerBlogPageRequest {
  page: number;
  perPage?: number;
}

export interface BlogpostControllerGetBlogpostRequest {
  id: number;
}

export interface BlogpostControllerGetBlogpostDraftRequest {
  id: number;
}

export interface BlogpostControllerPublishDraftRequest {
  id: number;
}

export interface BlogpostControllerUpdatePostDraftRequest {
  updateBlogpostDraftDto: UpdateBlogpostDraftDto;
}

/**
 * 
 */
export class BlogApi extends runtime.BaseAPI {

    /**
     */
    private async blogpostControllerBlogPageRaw(requestParameters: BlogpostControllerBlogPageRequest): Promise<runtime.ApiResponse<BlogPageDto>> {
        this.blogpostControllerBlogPageValidation(requestParameters);
        const context = this.blogpostControllerBlogPageContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlogPageDtoFromJSON(jsonValue));
    }



    /**
     */
    private blogpostControllerBlogPageValidation(requestParameters: BlogpostControllerBlogPageRequest) {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError("page","Required parameter requestParameters.page was null or undefined when calling blogpostControllerBlogPage.");
        }
    }

    /**
     */
    blogpostControllerBlogPageContext(requestParameters: BlogpostControllerBlogPageRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters["page"] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters["per_page"] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/blog`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    blogpostControllerBlogPage = async (page: number, perPage?: number): Promise<BlogPageDto> => {
        const response = await this.blogpostControllerBlogPageRaw({ page: page, perPage: perPage });
        return await response.value();
    }

    useBlogpostControllerBlogPage(page: number, perPage?: number, config?: SWRConfiguration<BlogPageDto, Error>) {
        let valid = true

        if (page === null || page === undefined || Number.isNaN(page)) {
            valid = false
        }

        const context = this.blogpostControllerBlogPageContext({ page: page!, perPage: perPage! });
        return useSWR(context, valid ? () => this.blogpostControllerBlogPage(page!, perPage!) : null, config)
    }

    /**
     */
    private async blogpostControllerGetBlogpostRaw(requestParameters: BlogpostControllerGetBlogpostRequest): Promise<runtime.ApiResponse<BlogpostDto>> {
        this.blogpostControllerGetBlogpostValidation(requestParameters);
        const context = this.blogpostControllerGetBlogpostContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlogpostDtoFromJSON(jsonValue));
    }



    /**
     */
    private blogpostControllerGetBlogpostValidation(requestParameters: BlogpostControllerGetBlogpostRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling blogpostControllerGetBlogpost.");
        }
    }

    /**
     */
    blogpostControllerGetBlogpostContext(requestParameters: BlogpostControllerGetBlogpostRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/v1/blog/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    blogpostControllerGetBlogpost = async (id: number): Promise<BlogpostDto> => {
        const response = await this.blogpostControllerGetBlogpostRaw({ id: id });
        return await response.value();
    }

    useBlogpostControllerGetBlogpost(id: number, config?: SWRConfiguration<BlogpostDto, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        const context = this.blogpostControllerGetBlogpostContext({ id: id! });
        return useSWR(context, valid ? () => this.blogpostControllerGetBlogpost(id!) : null, config)
    }

    /**
     */
    private async blogpostControllerGetBlogpostDraftRaw(requestParameters: BlogpostControllerGetBlogpostDraftRequest): Promise<runtime.ApiResponse<BlogpostDto>> {
        this.blogpostControllerGetBlogpostDraftValidation(requestParameters);
        const context = this.blogpostControllerGetBlogpostDraftContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlogpostDtoFromJSON(jsonValue));
    }



    /**
     */
    private blogpostControllerGetBlogpostDraftValidation(requestParameters: BlogpostControllerGetBlogpostDraftRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling blogpostControllerGetBlogpostDraft.");
        }
    }

    /**
     */
    blogpostControllerGetBlogpostDraftContext(requestParameters: BlogpostControllerGetBlogpostDraftRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/blog/draft/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    blogpostControllerGetBlogpostDraft = async (id: number): Promise<BlogpostDto> => {
        const response = await this.blogpostControllerGetBlogpostDraftRaw({ id: id });
        return await response.value();
    }

    useBlogpostControllerGetBlogpostDraft(id: number, config?: SWRConfiguration<BlogpostDto, Error>) {
        let valid = true

        if (id === null || id === undefined || Number.isNaN(id)) {
            valid = false
        }

        const context = this.blogpostControllerGetBlogpostDraftContext({ id: id! });
        return useSWR(context, valid ? () => this.blogpostControllerGetBlogpostDraft(id!) : null, config)
    }

    /**
     */
    private async blogpostControllerPublishDraftRaw(requestParameters: BlogpostControllerPublishDraftRequest): Promise<runtime.ApiResponse<BlogpostDto>> {
        this.blogpostControllerPublishDraftValidation(requestParameters);
        const context = this.blogpostControllerPublishDraftContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlogpostDtoFromJSON(jsonValue));
    }



    /**
     */
    private blogpostControllerPublishDraftValidation(requestParameters: BlogpostControllerPublishDraftRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id","Required parameter requestParameters.id was null or undefined when calling blogpostControllerPublishDraft.");
        }
    }

    /**
     */
    blogpostControllerPublishDraftContext(requestParameters: BlogpostControllerPublishDraftRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/blog/{id}/publish`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    blogpostControllerPublishDraft = async (id: number): Promise<BlogpostDto> => {
        const response = await this.blogpostControllerPublishDraftRaw({ id: id });
        return await response.value();
    }


    /**
     */
    private async blogpostControllerUpdatePostDraftRaw(requestParameters: BlogpostControllerUpdatePostDraftRequest): Promise<runtime.ApiResponse<BlogpostDto>> {
        this.blogpostControllerUpdatePostDraftValidation(requestParameters);
        const context = this.blogpostControllerUpdatePostDraftContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlogpostDtoFromJSON(jsonValue));
    }



    /**
     */
    private blogpostControllerUpdatePostDraftValidation(requestParameters: BlogpostControllerUpdatePostDraftRequest) {
        if (requestParameters.updateBlogpostDraftDto === null || requestParameters.updateBlogpostDraftDto === undefined) {
            throw new runtime.RequiredError("updateBlogpostDraftDto","Required parameter requestParameters.updateBlogpostDraftDto was null or undefined when calling blogpostControllerUpdatePostDraft.");
        }
    }

    /**
     */
    blogpostControllerUpdatePostDraftContext(requestParameters: BlogpostControllerUpdatePostDraftRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/v1/blog`,
            method: "PATCH",
            headers: headerParameters,
            query: queryParameters,
            body: UpdateBlogpostDraftDtoToJSON(requestParameters.updateBlogpostDraftDto),
        };
    }

    /**
     */
    blogpostControllerUpdatePostDraft = async (updateBlogpostDraftDto: UpdateBlogpostDraftDto): Promise<BlogpostDto> => {
        const response = await this.blogpostControllerUpdatePostDraftRaw({ updateBlogpostDraftDto: updateBlogpostDraftDto });
        return await response.value();
    }


}
