/* tslint:disable */
/* eslint-disable */
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";
import useSWR from "swr";
import { SWRConfiguration } from "swr/_internal";


export interface StorageControllerUploadImageRequest {
  file?: Blob;
}

/**
 * 
 */
export class StorageApi extends runtime.BaseAPI {

    /**
     */
    private async storageControllerUploadImageRaw(requestParameters: StorageControllerUploadImageRequest): Promise<runtime.ApiResponse<void>> {
        this.storageControllerUploadImageValidation(requestParameters);
        const context = this.storageControllerUploadImageContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }



    /**
     */
    private storageControllerUploadImageValidation(requestParameters: StorageControllerUploadImageRequest) {
    }

    /**
     */
    storageControllerUploadImageContext(requestParameters: StorageControllerUploadImageRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === "function" ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: "multipart/form-data" },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append("file", requestParameters.file as any);
        }

        return {
            path: `/v1/storage/upload`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        };
    }

    /**
     */
    storageControllerUploadImage = async (file?: Blob): Promise<void> => {
        await this.storageControllerUploadImageRaw({ file: file });
    }


}
