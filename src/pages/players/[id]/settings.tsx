import { NextPageContext } from "next";
import {
  Button,
  EmbedProps,
  InvitePlayerModalRaw,
  Logo,
  Panel,
  PlayerSummary,
  Section,
  Table,
  TimeAgo,
  UserPreview,
} from "@/components";
import React, { useState } from "react";
import {
  DodgeListEntryDto,
  PlayerSummaryDto,
  ProfileDecorationDto,
  Role,
  UserConnectionDtoConnectionEnum,
} from "@/api/back";
import { getApi } from "@/api/hooks";
import { FaTwitch } from "react-icons/fa";
import c from "./PlayerPage.module.scss";
import { getTwitchConnectUrl } from "@/util/getAuthUrl";
import cx from "clsx";
import { NotoSans } from "@/const/notosans";
import { EditProfileDecorations } from "@/containers";
import { formatDate } from "@/util/dates";
import { createPortal } from "react-dom";
import { SiAdblock } from "react-icons/si";
import { GiAngelWings } from "react-icons/gi";
import { AppRouter } from "@/route";
import { useAsyncButton } from "@/util/use-async-button";
import { makeSimpleToast } from "@/components/Toast/toasts";
import { useRefreshPageProps } from "@/util/usePageProps";
import { paidAction } from "@/util/subscription";

interface Props {
  summary: PlayerSummaryDto;
  decorations: ProfileDecorationDto[];
  playerId: string;
}

export default function PlayerSettings({ summary, decorations }: Props) {
  const { data, mutate } = getApi().playerApi.usePlayerControllerGetDodgeList();
  const [dodgeListOpen, setDodgeListOpen] = useState(false);
  const reloadProps = useRefreshPageProps();

  const dodgeList: DodgeListEntryDto[] = data || [];

  const twitchConnection = summary.user.connections.find(
    (t) => t.connection === UserConnectionDtoConnectionEnum.TWITCH,
  );

  const oldSubscription = summary.user.roles.find((t) => t.role === Role.OLD);

  console.log(summary.recalibration);

  const [isStartingRecalibration, startRecalibration] = useAsyncButton(
    paidAction(async () => {
      try {
        await getApi().playerApi.playerControllerStartRecalibration();
        reloadProps().then();
        return;
      } catch (e) {
        let msg = "";
        if (e instanceof Response) {
          msg = await e.json().then((t) => t["message"]);
        }
        makeSimpleToast("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ä–µ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∏", msg, 5000);
      }
    }),
    [reloadProps],
  );

  const close = () => setDodgeListOpen(false);

  return (
    <>
      {dodgeListOpen &&
        createPortal(
          <InvitePlayerModalRaw
            close={close}
            onSelect={(user) => {
              getApi()
                .playerApi.playerControllerDodgePlayer({
                  dodgeSteamId: user.steamId,
                })
                .then(mutate);
              close();
            }}
          />,
          document.body,
        )}
      <EmbedProps
        description={"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"}
        title={"–ù–∞—Å—Ç—Ä–æ–π–∫–∏"}
      />
      <PlayerSummary
        session={summary.session}
        banStatus={summary.banStatus}
        stats={summary.overallStats}
        user={summary.user}
        rank={summary.seasonStats.rank}
        mmr={summary.seasonStats.mmr}
      />
      <Section className={cx(c.section)}>
        <header className={c.heading}>
          <Logo size={30} /> dotaclassic plus
        </header>
        <Panel className={cx(c.panel, NotoSans.className)}>
          <p>
            {oldSubscription ? (
              <>
                –ê–∫—Ç–∏–≤–Ω–∞, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–Ω—á–∞–µ—Ç—Å—è{" "}
                <span className="gold">
                  <TimeAgo date={oldSubscription.endTime} />
                </span>
              </>
            ) : (
              "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
            )}
          </p>
          <Button
            className={c.inlineButton}
            small
            pageLink={AppRouter.store.index.link}
          >
            {oldSubscription ? "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" : "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"}
          </Button>
        </Panel>
      </Section>
      <Section className={cx(c.section)}>
        <header className={c.heading}>
          <GiAngelWings className={"gold"} /> –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        </header>

        <EditProfileDecorations decorations={decorations} user={summary.user} />
      </Section>
      <Section className={cx(c.section)}>
        <header className={c.heading}>
          <SiAdblock className={"red"} /> –ü–µ—Ä–µ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
        </header>
        <Panel className={cx(c.panel, NotoSans.className)}>
          <p>
            –ü–µ—Ä–µ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ ‚Äî —ç—Ç–æ —à–∞–Ω—Å —Å–±—Ä–æ—Å–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –∏ –ø—Ä–æ–π—Ç–∏
            –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –∑–∞–Ω–æ–≤–æ. –ü–æ–¥–æ–π–¥—ë—Ç —Ç–µ–º, –∫—Ç–æ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –±–æ–ª—å—à–µ
            –∏–ª–∏ —Ö–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∫–∞–ª–∏–±—Ä–æ–≤–∫—É –º–æ–∂–Ω–æ
            —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ —Å–µ–∑–æ–Ω.
          </p>
          {summary.recalibration ? (
            <Button
              mega
              disabled
              className={cx(c.inlineButton, c.recalibrationButton)}
            >
              –ü–µ—Ä–µ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
              <div>
                –ó–∞–ø—É—â–µ–Ω–∞ <TimeAgo date={summary.recalibration.createdAt} />
              </div>
            </Button>
          ) : (
            <Button
              disabled={isStartingRecalibration}
              mega
              onClick={startRecalibration}
              className={cx(c.inlineButton, c.recalibrationButton)}
            >
              –ü–µ—Ä–µ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
              <div>–ó–∞–ø—É—Å—Ç–∏—Ç—å!</div>
            </Button>
          )}
        </Panel>
      </Section>
      <Section className={cx(c.section)}>
        <header className={c.heading}>
          <SiAdblock className={"red"} /> –ò–∑–±–µ–≥–∞–µ–º—ã–µ –∏–≥—Ä–æ–∫–∏
        </header>
        <Panel className={cx(c.panel, NotoSans.className)}>
          <p>
            –û–±–ª–∞–¥–∞—Ç–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ dotaclassic plus –º–æ–≥—É—Ç –¥–æ–±–∞–≤–∏—Ç—å –¥–æ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            –≤ —Å–ø–∏—Å–æ–∫ –∏–∑–±–µ–≥–∞–µ–º—ã—Ö –∏–≥—Ä–æ–∫–æ–≤. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–ø–∞–¥–∞—Ç—å—Å—è —Å
            –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º –∑–∞ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É.
          </p>
          <Table>
            <thead>
              <tr>
                <th>–ò–≥—Ä–æ–∫</th>
                <th>–î–∞—Ç–∞ –¥–æ–¥–∂–∞</th>
                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
              </tr>
            </thead>
            <tbody>
              {dodgeList.map((it) => (
                <tr key={it.user.steamId}>
                  <td>
                    <UserPreview roles user={it.user} />
                  </td>
                  <td>{formatDate(new Date(it.createdAt))}</td>
                  <td>
                    <Button
                      onClick={() =>
                        getApi()
                          .playerApi.playerControllerUnDodgePlayer({
                            dodgeSteamId: it.user.steamId,
                          })
                          .then(mutate)
                      }
                    >
                      –£–±—Ä–∞—Ç—å
                    </Button>
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>
          <Button
            className={c.inlineButton}
            onClick={() => setDodgeListOpen(true)}
          >
            –ò–∑–±–µ–≥–∞—Ç—å –∏–≥—Ä–æ–∫–∞
          </Button>
        </Panel>
      </Section>

      <Section className={cx(c.section)}>
        <header className={c.heading}>
          <FaTwitch className={c.twitch} /> Twitch
        </header>

        <Panel className={cx(c.panel, NotoSans.className)}>
          <p>
            <b>
              –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–≤–æ–π Twitch-–ø—Ä–æ—Ñ–∏–ª—å –∫ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ
              –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!
            </b>{" "}
            –ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ—è–≤–∏—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à —Å—Ç—Ä–∏–º, –∞ –≤
            —á–∞—Ç–µ ‚Äî —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∏–∫–æ–Ω–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–¥–µ–ª–∏—Ç –≤–∞—Å —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö
            –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ï—Å–ª–∏ –≤—ã –≤–µ–¥—ë—Ç–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –Ω–∞—à–µ–π –∏–≥—Ä—ã, –º—ã
            –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å—Ç—Ä–∏–º, —á—Ç–æ–±—ã
            –∑—Ä–∏—Ç–µ–ª–∏ –º–æ–≥–ª–∏ –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏ –≤–∞—à –∫–∞–Ω–∞–ª. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–∏–≤–ª–µ—á—å
            –Ω–æ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ —Å–¥–µ–ª–∞—Ç—å –≤–∞—à —Å—Ç—Ä–∏–º –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º! üéÆüì∫
          </p>
          <p>
            <span className="gold">–í–Ω–∏–º–∞–Ω–∏–µ:</span> —á—Ç–æ–±—ã —Ç–≤–æ–π —Å—Ç—Ä–∏–º –æ—Ç–æ–±—Ä–∞–∂–∞–ª—Å—è
            –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –∏–≥—Ä–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å Dota 2, –∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–∞—Ç—å –≤
            —Å–µ–±—è <span className="gold">dotaclassic.ru</span>
          </p>
          <div className={c.twitchBlock}>
            <span>–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:</span>
            {twitchConnection ? (
              <a
                target={"__blank"}
                className={"link"}
                href={`https://twitch.tv/${twitchConnection.externalId}`}
              >
                twitch.tv/{twitchConnection.externalId}
              </a>
            ) : (
              "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
            )}
          </div>

          <div className={c.buttons}>
            <Button link href={getTwitchConnectUrl()}>
              –ü–æ–¥–∫–ª—é—á–∏—Ç—å{twitchConnection ? " –¥—Ä—É–≥–æ–π" : ""} –∞–∫–∫–∞—É–Ω—Ç twitch
            </Button>
            {twitchConnection && (
              <Button
                onClick={async () => {
                  await getApi().settings.authControllerRemoveTwitchConnection();
                  window.location.reload();
                }}
              >
                –û—Ç–≤—è–∑–∞—Ç—å twitch –∞–∫–∫–∞—É–Ω—Ç
              </Button>
            )}
          </div>
        </Panel>
      </Section>
    </>
  );
}

PlayerSettings.getInitialProps = async (
  ctx: NextPageContext,
): Promise<Props> => {
  const playerId = ctx.query.id as string;

  const [summary, decorations] = await Promise.combine([
    getApi().playerApi.playerControllerPlayerSummary(playerId),
    getApi().decoration.customizationControllerAll(),
  ]);
  return {
    summary,
    decorations,
    playerId,
  };
};
